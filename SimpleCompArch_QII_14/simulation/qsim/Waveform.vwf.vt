// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/23/2016 19:57:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    SimpleCompArch
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SimpleCompArch_vlg_sample_tst(
	sys_clk,
	sys_rst,
	sampler_tx
);
input  sys_clk;
input  sys_rst;
output sampler_tx;

reg sample;
time current_time;
always @(sys_clk or sys_rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module SimpleCompArch_vlg_check_tst (
	cache_state_d,
	cont_state_d,
	controller_en_d,
	D_ALUs,
	D_jpz,
	D_mdin_bus,
	D_mdout_bus,
	D_mem_addr,
	D_Mre,
	D_Mwe,
	D_PCld,
	D_rfout_bus,
	D_RFr1a,
	D_RFr1e,
	D_RFr2a,
	D_RFr2e,
	D_RFs,
	D_RFwa,
	D_RFwe,
	state_cpu,
	sys_output,
	sampler_rx
);
input [3:0] cache_state_d;
input [3:0] cont_state_d;
input  controller_en_d;
input [1:0] D_ALUs;
input  D_jpz;
input [15:0] D_mdin_bus;
input [15:0] D_mdout_bus;
input [11:0] D_mem_addr;
input  D_Mre;
input  D_Mwe;
input  D_PCld;
input [15:0] D_rfout_bus;
input [3:0] D_RFr1a;
input  D_RFr1e;
input [3:0] D_RFr2a;
input  D_RFr2e;
input [1:0] D_RFs;
input [3:0] D_RFwa;
input  D_RFwe;
input [11:0] state_cpu;
input [15:0] sys_output;
input sampler_rx;

reg [3:0] cache_state_d_expected;
reg [3:0] cont_state_d_expected;
reg  controller_en_d_expected;
reg [1:0] D_ALUs_expected;
reg  D_jpz_expected;
reg [15:0] D_mdin_bus_expected;
reg [15:0] D_mdout_bus_expected;
reg [11:0] D_mem_addr_expected;
reg  D_Mre_expected;
reg  D_Mwe_expected;
reg  D_PCld_expected;
reg [15:0] D_rfout_bus_expected;
reg [3:0] D_RFr1a_expected;
reg  D_RFr1e_expected;
reg [3:0] D_RFr2a_expected;
reg  D_RFr2e_expected;
reg [1:0] D_RFs_expected;
reg [3:0] D_RFwa_expected;
reg  D_RFwe_expected;
reg [11:0] state_cpu_expected;
reg [15:0] sys_output_expected;

reg [3:0] cache_state_d_prev;
reg [3:0] cont_state_d_prev;
reg  controller_en_d_prev;
reg [1:0] D_ALUs_prev;
reg  D_jpz_prev;
reg [15:0] D_mdin_bus_prev;
reg [15:0] D_mdout_bus_prev;
reg [11:0] D_mem_addr_prev;
reg  D_Mre_prev;
reg  D_Mwe_prev;
reg  D_PCld_prev;
reg [15:0] D_rfout_bus_prev;
reg [3:0] D_RFr1a_prev;
reg  D_RFr1e_prev;
reg [3:0] D_RFr2a_prev;
reg  D_RFr2e_prev;
reg [1:0] D_RFs_prev;
reg [3:0] D_RFwa_prev;
reg  D_RFwe_prev;
reg [11:0] state_cpu_prev;
reg [15:0] sys_output_prev;

reg [3:0] cache_state_d_expected_prev;
reg [3:0] cont_state_d_expected_prev;
reg  controller_en_d_expected_prev;
reg [1:0] D_ALUs_expected_prev;
reg  D_jpz_expected_prev;
reg [15:0] D_mdin_bus_expected_prev;
reg [15:0] D_mdout_bus_expected_prev;
reg [11:0] D_mem_addr_expected_prev;
reg  D_Mre_expected_prev;
reg  D_Mwe_expected_prev;
reg  D_PCld_expected_prev;
reg [15:0] D_rfout_bus_expected_prev;
reg [3:0] D_RFr1a_expected_prev;
reg  D_RFr1e_expected_prev;
reg [3:0] D_RFr2a_expected_prev;
reg  D_RFr2e_expected_prev;
reg [1:0] D_RFs_expected_prev;
reg [3:0] D_RFwa_expected_prev;
reg  D_RFwe_expected_prev;
reg [11:0] state_cpu_expected_prev;
reg [15:0] sys_output_expected_prev;

reg [3:0] last_cache_state_d_exp;
reg [3:0] last_cont_state_d_exp;
reg  last_controller_en_d_exp;
reg [1:0] last_D_ALUs_exp;
reg  last_D_jpz_exp;
reg [15:0] last_D_mdin_bus_exp;
reg [15:0] last_D_mdout_bus_exp;
reg [11:0] last_D_mem_addr_exp;
reg  last_D_Mre_exp;
reg  last_D_Mwe_exp;
reg  last_D_PCld_exp;
reg [15:0] last_D_rfout_bus_exp;
reg [3:0] last_D_RFr1a_exp;
reg  last_D_RFr1e_exp;
reg [3:0] last_D_RFr2a_exp;
reg  last_D_RFr2e_exp;
reg [1:0] last_D_RFs_exp;
reg [3:0] last_D_RFwa_exp;
reg  last_D_RFwe_exp;
reg [11:0] last_state_cpu_exp;
reg [15:0] last_sys_output_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:21] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 21'b1;
end

// update real /o prevs

always @(trigger)
begin
	cache_state_d_prev = cache_state_d;
	cont_state_d_prev = cont_state_d;
	controller_en_d_prev = controller_en_d;
	D_ALUs_prev = D_ALUs;
	D_jpz_prev = D_jpz;
	D_mdin_bus_prev = D_mdin_bus;
	D_mdout_bus_prev = D_mdout_bus;
	D_mem_addr_prev = D_mem_addr;
	D_Mre_prev = D_Mre;
	D_Mwe_prev = D_Mwe;
	D_PCld_prev = D_PCld;
	D_rfout_bus_prev = D_rfout_bus;
	D_RFr1a_prev = D_RFr1a;
	D_RFr1e_prev = D_RFr1e;
	D_RFr2a_prev = D_RFr2a;
	D_RFr2e_prev = D_RFr2e;
	D_RFs_prev = D_RFs;
	D_RFwa_prev = D_RFwa;
	D_RFwe_prev = D_RFwe;
	state_cpu_prev = state_cpu;
	sys_output_prev = sys_output;
end

// update expected /o prevs

always @(trigger)
begin
	cache_state_d_expected_prev = cache_state_d_expected;
	cont_state_d_expected_prev = cont_state_d_expected;
	controller_en_d_expected_prev = controller_en_d_expected;
	D_ALUs_expected_prev = D_ALUs_expected;
	D_jpz_expected_prev = D_jpz_expected;
	D_mdin_bus_expected_prev = D_mdin_bus_expected;
	D_mdout_bus_expected_prev = D_mdout_bus_expected;
	D_mem_addr_expected_prev = D_mem_addr_expected;
	D_Mre_expected_prev = D_Mre_expected;
	D_Mwe_expected_prev = D_Mwe_expected;
	D_PCld_expected_prev = D_PCld_expected;
	D_rfout_bus_expected_prev = D_rfout_bus_expected;
	D_RFr1a_expected_prev = D_RFr1a_expected;
	D_RFr1e_expected_prev = D_RFr1e_expected;
	D_RFr2a_expected_prev = D_RFr2a_expected;
	D_RFr2e_expected_prev = D_RFr2e_expected;
	D_RFs_expected_prev = D_RFs_expected;
	D_RFwa_expected_prev = D_RFwa_expected;
	D_RFwe_expected_prev = D_RFwe_expected;
	state_cpu_expected_prev = state_cpu_expected;
	sys_output_expected_prev = sys_output_expected;
end


// expected cache_state_d[ 3 ]
initial
begin
	cache_state_d_expected[3] = 1'bX;
end 
// expected cache_state_d[ 2 ]
initial
begin
	cache_state_d_expected[2] = 1'bX;
end 
// expected cache_state_d[ 1 ]
initial
begin
	cache_state_d_expected[1] = 1'bX;
end 
// expected cache_state_d[ 0 ]
initial
begin
	cache_state_d_expected[0] = 1'bX;
end 
// expected cont_state_d[ 3 ]
initial
begin
	cont_state_d_expected[3] = 1'bX;
end 
// expected cont_state_d[ 2 ]
initial
begin
	cont_state_d_expected[2] = 1'bX;
end 
// expected cont_state_d[ 1 ]
initial
begin
	cont_state_d_expected[1] = 1'bX;
end 
// expected cont_state_d[ 0 ]
initial
begin
	cont_state_d_expected[0] = 1'bX;
end 

// expected controller_en_d
initial
begin
	controller_en_d_expected = 1'bX;
end 
// expected state_cpu[ 11 ]
initial
begin
	state_cpu_expected[11] = 1'bX;
end 
// expected state_cpu[ 10 ]
initial
begin
	state_cpu_expected[10] = 1'bX;
end 
// expected state_cpu[ 9 ]
initial
begin
	state_cpu_expected[9] = 1'bX;
end 
// expected state_cpu[ 8 ]
initial
begin
	state_cpu_expected[8] = 1'bX;
end 
// expected state_cpu[ 7 ]
initial
begin
	state_cpu_expected[7] = 1'bX;
end 
// expected state_cpu[ 6 ]
initial
begin
	state_cpu_expected[6] = 1'bX;
end 
// expected state_cpu[ 5 ]
initial
begin
	state_cpu_expected[5] = 1'bX;
end 
// expected state_cpu[ 4 ]
initial
begin
	state_cpu_expected[4] = 1'bX;
end 
// expected state_cpu[ 3 ]
initial
begin
	state_cpu_expected[3] = 1'bX;
end 
// expected state_cpu[ 2 ]
initial
begin
	state_cpu_expected[2] = 1'bX;
end 
// expected state_cpu[ 1 ]
initial
begin
	state_cpu_expected[1] = 1'bX;
end 
// expected state_cpu[ 0 ]
initial
begin
	state_cpu_expected[0] = 1'bX;
end 
// expected D_mem_addr[ 11 ]
initial
begin
	D_mem_addr_expected[11] = 1'bX;
end 
// expected D_mem_addr[ 10 ]
initial
begin
	D_mem_addr_expected[10] = 1'bX;
end 
// expected D_mem_addr[ 9 ]
initial
begin
	D_mem_addr_expected[9] = 1'bX;
end 
// expected D_mem_addr[ 8 ]
initial
begin
	D_mem_addr_expected[8] = 1'bX;
end 
// expected D_mem_addr[ 7 ]
initial
begin
	D_mem_addr_expected[7] = 1'bX;
end 
// expected D_mem_addr[ 6 ]
initial
begin
	D_mem_addr_expected[6] = 1'bX;
end 
// expected D_mem_addr[ 5 ]
initial
begin
	D_mem_addr_expected[5] = 1'bX;
end 
// expected D_mem_addr[ 4 ]
initial
begin
	D_mem_addr_expected[4] = 1'bX;
end 
// expected D_mem_addr[ 3 ]
initial
begin
	D_mem_addr_expected[3] = 1'bX;
end 
// expected D_mem_addr[ 2 ]
initial
begin
	D_mem_addr_expected[2] = 1'bX;
end 
// expected D_mem_addr[ 1 ]
initial
begin
	D_mem_addr_expected[1] = 1'bX;
end 
// expected D_mem_addr[ 0 ]
initial
begin
	D_mem_addr_expected[0] = 1'bX;
end 
// expected D_ALUs[ 1 ]
initial
begin
	D_ALUs_expected[1] = 1'bX;
end 
// expected D_ALUs[ 0 ]
initial
begin
	D_ALUs_expected[0] = 1'bX;
end 

// expected D_jpz
initial
begin
	D_jpz_expected = 1'bX;
end 
// expected D_mdin_bus[ 15 ]
initial
begin
	D_mdin_bus_expected[15] = 1'bX;
end 
// expected D_mdin_bus[ 14 ]
initial
begin
	D_mdin_bus_expected[14] = 1'bX;
end 
// expected D_mdin_bus[ 13 ]
initial
begin
	D_mdin_bus_expected[13] = 1'bX;
end 
// expected D_mdin_bus[ 12 ]
initial
begin
	D_mdin_bus_expected[12] = 1'bX;
end 
// expected D_mdin_bus[ 11 ]
initial
begin
	D_mdin_bus_expected[11] = 1'bX;
end 
// expected D_mdin_bus[ 10 ]
initial
begin
	D_mdin_bus_expected[10] = 1'bX;
end 
// expected D_mdin_bus[ 9 ]
initial
begin
	D_mdin_bus_expected[9] = 1'bX;
end 
// expected D_mdin_bus[ 8 ]
initial
begin
	D_mdin_bus_expected[8] = 1'bX;
end 
// expected D_mdin_bus[ 7 ]
initial
begin
	D_mdin_bus_expected[7] = 1'bX;
end 
// expected D_mdin_bus[ 6 ]
initial
begin
	D_mdin_bus_expected[6] = 1'bX;
end 
// expected D_mdin_bus[ 5 ]
initial
begin
	D_mdin_bus_expected[5] = 1'bX;
end 
// expected D_mdin_bus[ 4 ]
initial
begin
	D_mdin_bus_expected[4] = 1'bX;
end 
// expected D_mdin_bus[ 3 ]
initial
begin
	D_mdin_bus_expected[3] = 1'bX;
end 
// expected D_mdin_bus[ 2 ]
initial
begin
	D_mdin_bus_expected[2] = 1'bX;
end 
// expected D_mdin_bus[ 1 ]
initial
begin
	D_mdin_bus_expected[1] = 1'bX;
end 
// expected D_mdin_bus[ 0 ]
initial
begin
	D_mdin_bus_expected[0] = 1'bX;
end 
// expected D_mdout_bus[ 15 ]
initial
begin
	D_mdout_bus_expected[15] = 1'bX;
end 
// expected D_mdout_bus[ 14 ]
initial
begin
	D_mdout_bus_expected[14] = 1'bX;
end 
// expected D_mdout_bus[ 13 ]
initial
begin
	D_mdout_bus_expected[13] = 1'bX;
end 
// expected D_mdout_bus[ 12 ]
initial
begin
	D_mdout_bus_expected[12] = 1'bX;
end 
// expected D_mdout_bus[ 11 ]
initial
begin
	D_mdout_bus_expected[11] = 1'bX;
end 
// expected D_mdout_bus[ 10 ]
initial
begin
	D_mdout_bus_expected[10] = 1'bX;
end 
// expected D_mdout_bus[ 9 ]
initial
begin
	D_mdout_bus_expected[9] = 1'bX;
end 
// expected D_mdout_bus[ 8 ]
initial
begin
	D_mdout_bus_expected[8] = 1'bX;
end 
// expected D_mdout_bus[ 7 ]
initial
begin
	D_mdout_bus_expected[7] = 1'bX;
end 
// expected D_mdout_bus[ 6 ]
initial
begin
	D_mdout_bus_expected[6] = 1'bX;
end 
// expected D_mdout_bus[ 5 ]
initial
begin
	D_mdout_bus_expected[5] = 1'bX;
end 
// expected D_mdout_bus[ 4 ]
initial
begin
	D_mdout_bus_expected[4] = 1'bX;
end 
// expected D_mdout_bus[ 3 ]
initial
begin
	D_mdout_bus_expected[3] = 1'bX;
end 
// expected D_mdout_bus[ 2 ]
initial
begin
	D_mdout_bus_expected[2] = 1'bX;
end 
// expected D_mdout_bus[ 1 ]
initial
begin
	D_mdout_bus_expected[1] = 1'bX;
end 
// expected D_mdout_bus[ 0 ]
initial
begin
	D_mdout_bus_expected[0] = 1'bX;
end 

// expected D_Mre
initial
begin
	D_Mre_expected = 1'bX;
end 

// expected D_Mwe
initial
begin
	D_Mwe_expected = 1'bX;
end 

// expected D_PCld
initial
begin
	D_PCld_expected = 1'bX;
end 
// expected D_rfout_bus[ 15 ]
initial
begin
	D_rfout_bus_expected[15] = 1'bX;
end 
// expected D_rfout_bus[ 14 ]
initial
begin
	D_rfout_bus_expected[14] = 1'bX;
end 
// expected D_rfout_bus[ 13 ]
initial
begin
	D_rfout_bus_expected[13] = 1'bX;
end 
// expected D_rfout_bus[ 12 ]
initial
begin
	D_rfout_bus_expected[12] = 1'bX;
end 
// expected D_rfout_bus[ 11 ]
initial
begin
	D_rfout_bus_expected[11] = 1'bX;
end 
// expected D_rfout_bus[ 10 ]
initial
begin
	D_rfout_bus_expected[10] = 1'bX;
end 
// expected D_rfout_bus[ 9 ]
initial
begin
	D_rfout_bus_expected[9] = 1'bX;
end 
// expected D_rfout_bus[ 8 ]
initial
begin
	D_rfout_bus_expected[8] = 1'bX;
end 
// expected D_rfout_bus[ 7 ]
initial
begin
	D_rfout_bus_expected[7] = 1'bX;
end 
// expected D_rfout_bus[ 6 ]
initial
begin
	D_rfout_bus_expected[6] = 1'bX;
end 
// expected D_rfout_bus[ 5 ]
initial
begin
	D_rfout_bus_expected[5] = 1'bX;
end 
// expected D_rfout_bus[ 4 ]
initial
begin
	D_rfout_bus_expected[4] = 1'bX;
end 
// expected D_rfout_bus[ 3 ]
initial
begin
	D_rfout_bus_expected[3] = 1'bX;
end 
// expected D_rfout_bus[ 2 ]
initial
begin
	D_rfout_bus_expected[2] = 1'bX;
end 
// expected D_rfout_bus[ 1 ]
initial
begin
	D_rfout_bus_expected[1] = 1'bX;
end 
// expected D_rfout_bus[ 0 ]
initial
begin
	D_rfout_bus_expected[0] = 1'bX;
end 
// expected D_RFr1a[ 3 ]
initial
begin
	D_RFr1a_expected[3] = 1'bX;
end 
// expected D_RFr1a[ 2 ]
initial
begin
	D_RFr1a_expected[2] = 1'bX;
end 
// expected D_RFr1a[ 1 ]
initial
begin
	D_RFr1a_expected[1] = 1'bX;
end 
// expected D_RFr1a[ 0 ]
initial
begin
	D_RFr1a_expected[0] = 1'bX;
end 

// expected D_RFr1e
initial
begin
	D_RFr1e_expected = 1'bX;
end 
// expected D_RFr2a[ 3 ]
initial
begin
	D_RFr2a_expected[3] = 1'bX;
end 
// expected D_RFr2a[ 2 ]
initial
begin
	D_RFr2a_expected[2] = 1'bX;
end 
// expected D_RFr2a[ 1 ]
initial
begin
	D_RFr2a_expected[1] = 1'bX;
end 
// expected D_RFr2a[ 0 ]
initial
begin
	D_RFr2a_expected[0] = 1'bX;
end 

// expected D_RFr2e
initial
begin
	D_RFr2e_expected = 1'bX;
end 
// expected D_RFs[ 1 ]
initial
begin
	D_RFs_expected[1] = 1'bX;
end 
// expected D_RFs[ 0 ]
initial
begin
	D_RFs_expected[0] = 1'bX;
end 
// expected D_RFwa[ 3 ]
initial
begin
	D_RFwa_expected[3] = 1'bX;
end 
// expected D_RFwa[ 2 ]
initial
begin
	D_RFwa_expected[2] = 1'bX;
end 
// expected D_RFwa[ 1 ]
initial
begin
	D_RFwa_expected[1] = 1'bX;
end 
// expected D_RFwa[ 0 ]
initial
begin
	D_RFwa_expected[0] = 1'bX;
end 

// expected D_RFwe
initial
begin
	D_RFwe_expected = 1'bX;
end 
// expected sys_output[ 15 ]
initial
begin
	sys_output_expected[15] = 1'bX;
end 
// expected sys_output[ 14 ]
initial
begin
	sys_output_expected[14] = 1'bX;
end 
// expected sys_output[ 13 ]
initial
begin
	sys_output_expected[13] = 1'bX;
end 
// expected sys_output[ 12 ]
initial
begin
	sys_output_expected[12] = 1'bX;
end 
// expected sys_output[ 11 ]
initial
begin
	sys_output_expected[11] = 1'bX;
end 
// expected sys_output[ 10 ]
initial
begin
	sys_output_expected[10] = 1'bX;
end 
// expected sys_output[ 9 ]
initial
begin
	sys_output_expected[9] = 1'bX;
end 
// expected sys_output[ 8 ]
initial
begin
	sys_output_expected[8] = 1'bX;
end 
// expected sys_output[ 7 ]
initial
begin
	sys_output_expected[7] = 1'bX;
end 
// expected sys_output[ 6 ]
initial
begin
	sys_output_expected[6] = 1'bX;
end 
// expected sys_output[ 5 ]
initial
begin
	sys_output_expected[5] = 1'bX;
end 
// expected sys_output[ 4 ]
initial
begin
	sys_output_expected[4] = 1'bX;
end 
// expected sys_output[ 3 ]
initial
begin
	sys_output_expected[3] = 1'bX;
end 
// expected sys_output[ 2 ]
initial
begin
	sys_output_expected[2] = 1'bX;
end 
// expected sys_output[ 1 ]
initial
begin
	sys_output_expected[1] = 1'bX;
end 
// expected sys_output[ 0 ]
initial
begin
	sys_output_expected[0] = 1'bX;
end 
// generate trigger
always @(cache_state_d_expected or cache_state_d or cont_state_d_expected or cont_state_d or controller_en_d_expected or controller_en_d or D_ALUs_expected or D_ALUs or D_jpz_expected or D_jpz or D_mdin_bus_expected or D_mdin_bus or D_mdout_bus_expected or D_mdout_bus or D_mem_addr_expected or D_mem_addr or D_Mre_expected or D_Mre or D_Mwe_expected or D_Mwe or D_PCld_expected or D_PCld or D_rfout_bus_expected or D_rfout_bus or D_RFr1a_expected or D_RFr1a or D_RFr1e_expected or D_RFr1e or D_RFr2a_expected or D_RFr2a or D_RFr2e_expected or D_RFr2e or D_RFs_expected or D_RFs or D_RFwa_expected or D_RFwa or D_RFwe_expected or D_RFwe or state_cpu_expected or state_cpu or sys_output_expected or sys_output)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cache_state_d = %b | expected cont_state_d = %b | expected controller_en_d = %b | expected D_ALUs = %b | expected D_jpz = %b | expected D_mdin_bus = %b | expected D_mdout_bus = %b | expected D_mem_addr = %b | expected D_Mre = %b | expected D_Mwe = %b | expected D_PCld = %b | expected D_rfout_bus = %b | expected D_RFr1a = %b | expected D_RFr1e = %b | expected D_RFr2a = %b | expected D_RFr2e = %b | expected D_RFs = %b | expected D_RFwa = %b | expected D_RFwe = %b | expected state_cpu = %b | expected sys_output = %b | ",cache_state_d_expected_prev,cont_state_d_expected_prev,controller_en_d_expected_prev,D_ALUs_expected_prev,D_jpz_expected_prev,D_mdin_bus_expected_prev,D_mdout_bus_expected_prev,D_mem_addr_expected_prev,D_Mre_expected_prev,D_Mwe_expected_prev,D_PCld_expected_prev,D_rfout_bus_expected_prev,D_RFr1a_expected_prev,D_RFr1e_expected_prev,D_RFr2a_expected_prev,D_RFr2e_expected_prev,D_RFs_expected_prev,D_RFwa_expected_prev,D_RFwe_expected_prev,state_cpu_expected_prev,sys_output_expected_prev);
	$display("| real cache_state_d = %b | real cont_state_d = %b | real controller_en_d = %b | real D_ALUs = %b | real D_jpz = %b | real D_mdin_bus = %b | real D_mdout_bus = %b | real D_mem_addr = %b | real D_Mre = %b | real D_Mwe = %b | real D_PCld = %b | real D_rfout_bus = %b | real D_RFr1a = %b | real D_RFr1e = %b | real D_RFr2a = %b | real D_RFr2e = %b | real D_RFs = %b | real D_RFwa = %b | real D_RFwe = %b | real state_cpu = %b | real sys_output = %b | ",cache_state_d_prev,cont_state_d_prev,controller_en_d_prev,D_ALUs_prev,D_jpz_prev,D_mdin_bus_prev,D_mdout_bus_prev,D_mem_addr_prev,D_Mre_prev,D_Mwe_prev,D_PCld_prev,D_rfout_bus_prev,D_RFr1a_prev,D_RFr1e_prev,D_RFr2a_prev,D_RFr2e_prev,D_RFs_prev,D_RFwa_prev,D_RFwe_prev,state_cpu_prev,sys_output_prev);
`endif
	if (
		( cache_state_d_expected_prev[0] !== 1'bx ) && ( cache_state_d_prev[0] !== cache_state_d_expected_prev[0] )
		&& ((cache_state_d_expected_prev[0] !== last_cache_state_d_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cache_state_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cache_state_d_expected_prev);
		$display ("     Real value = %b", cache_state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cache_state_d_exp[0] = cache_state_d_expected_prev[0];
	end
	if (
		( cache_state_d_expected_prev[1] !== 1'bx ) && ( cache_state_d_prev[1] !== cache_state_d_expected_prev[1] )
		&& ((cache_state_d_expected_prev[1] !== last_cache_state_d_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cache_state_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cache_state_d_expected_prev);
		$display ("     Real value = %b", cache_state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cache_state_d_exp[1] = cache_state_d_expected_prev[1];
	end
	if (
		( cache_state_d_expected_prev[2] !== 1'bx ) && ( cache_state_d_prev[2] !== cache_state_d_expected_prev[2] )
		&& ((cache_state_d_expected_prev[2] !== last_cache_state_d_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cache_state_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cache_state_d_expected_prev);
		$display ("     Real value = %b", cache_state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cache_state_d_exp[2] = cache_state_d_expected_prev[2];
	end
	if (
		( cache_state_d_expected_prev[3] !== 1'bx ) && ( cache_state_d_prev[3] !== cache_state_d_expected_prev[3] )
		&& ((cache_state_d_expected_prev[3] !== last_cache_state_d_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cache_state_d[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cache_state_d_expected_prev);
		$display ("     Real value = %b", cache_state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cache_state_d_exp[3] = cache_state_d_expected_prev[3];
	end
	if (
		( cont_state_d_expected_prev[0] !== 1'bx ) && ( cont_state_d_prev[0] !== cont_state_d_expected_prev[0] )
		&& ((cont_state_d_expected_prev[0] !== last_cont_state_d_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_state_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_state_d_expected_prev);
		$display ("     Real value = %b", cont_state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cont_state_d_exp[0] = cont_state_d_expected_prev[0];
	end
	if (
		( cont_state_d_expected_prev[1] !== 1'bx ) && ( cont_state_d_prev[1] !== cont_state_d_expected_prev[1] )
		&& ((cont_state_d_expected_prev[1] !== last_cont_state_d_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_state_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_state_d_expected_prev);
		$display ("     Real value = %b", cont_state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cont_state_d_exp[1] = cont_state_d_expected_prev[1];
	end
	if (
		( cont_state_d_expected_prev[2] !== 1'bx ) && ( cont_state_d_prev[2] !== cont_state_d_expected_prev[2] )
		&& ((cont_state_d_expected_prev[2] !== last_cont_state_d_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_state_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_state_d_expected_prev);
		$display ("     Real value = %b", cont_state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cont_state_d_exp[2] = cont_state_d_expected_prev[2];
	end
	if (
		( cont_state_d_expected_prev[3] !== 1'bx ) && ( cont_state_d_prev[3] !== cont_state_d_expected_prev[3] )
		&& ((cont_state_d_expected_prev[3] !== last_cont_state_d_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_state_d[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_state_d_expected_prev);
		$display ("     Real value = %b", cont_state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cont_state_d_exp[3] = cont_state_d_expected_prev[3];
	end
	if (
		( controller_en_d_expected_prev !== 1'bx ) && ( controller_en_d_prev !== controller_en_d_expected_prev )
		&& ((controller_en_d_expected_prev !== last_controller_en_d_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controller_en_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controller_en_d_expected_prev);
		$display ("     Real value = %b", controller_en_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_controller_en_d_exp = controller_en_d_expected_prev;
	end
	if (
		( D_ALUs_expected_prev[0] !== 1'bx ) && ( D_ALUs_prev[0] !== D_ALUs_expected_prev[0] )
		&& ((D_ALUs_expected_prev[0] !== last_D_ALUs_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_ALUs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_ALUs_expected_prev);
		$display ("     Real value = %b", D_ALUs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_ALUs_exp[0] = D_ALUs_expected_prev[0];
	end
	if (
		( D_ALUs_expected_prev[1] !== 1'bx ) && ( D_ALUs_prev[1] !== D_ALUs_expected_prev[1] )
		&& ((D_ALUs_expected_prev[1] !== last_D_ALUs_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_ALUs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_ALUs_expected_prev);
		$display ("     Real value = %b", D_ALUs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_ALUs_exp[1] = D_ALUs_expected_prev[1];
	end
	if (
		( D_jpz_expected_prev !== 1'bx ) && ( D_jpz_prev !== D_jpz_expected_prev )
		&& ((D_jpz_expected_prev !== last_D_jpz_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_jpz :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_jpz_expected_prev);
		$display ("     Real value = %b", D_jpz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D_jpz_exp = D_jpz_expected_prev;
	end
	if (
		( D_mdin_bus_expected_prev[0] !== 1'bx ) && ( D_mdin_bus_prev[0] !== D_mdin_bus_expected_prev[0] )
		&& ((D_mdin_bus_expected_prev[0] !== last_D_mdin_bus_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D_mdin_bus_exp[0] = D_mdin_bus_expected_prev[0];
	end
	if (
		( D_mdin_bus_expected_prev[1] !== 1'bx ) && ( D_mdin_bus_prev[1] !== D_mdin_bus_expected_prev[1] )
		&& ((D_mdin_bus_expected_prev[1] !== last_D_mdin_bus_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D_mdin_bus_exp[1] = D_mdin_bus_expected_prev[1];
	end
	if (
		( D_mdin_bus_expected_prev[2] !== 1'bx ) && ( D_mdin_bus_prev[2] !== D_mdin_bus_expected_prev[2] )
		&& ((D_mdin_bus_expected_prev[2] !== last_D_mdin_bus_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D_mdin_bus_exp[2] = D_mdin_bus_expected_prev[2];
	end
	if (
		( D_mdin_bus_expected_prev[3] !== 1'bx ) && ( D_mdin_bus_prev[3] !== D_mdin_bus_expected_prev[3] )
		&& ((D_mdin_bus_expected_prev[3] !== last_D_mdin_bus_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D_mdin_bus_exp[3] = D_mdin_bus_expected_prev[3];
	end
	if (
		( D_mdin_bus_expected_prev[4] !== 1'bx ) && ( D_mdin_bus_prev[4] !== D_mdin_bus_expected_prev[4] )
		&& ((D_mdin_bus_expected_prev[4] !== last_D_mdin_bus_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D_mdin_bus_exp[4] = D_mdin_bus_expected_prev[4];
	end
	if (
		( D_mdin_bus_expected_prev[5] !== 1'bx ) && ( D_mdin_bus_prev[5] !== D_mdin_bus_expected_prev[5] )
		&& ((D_mdin_bus_expected_prev[5] !== last_D_mdin_bus_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D_mdin_bus_exp[5] = D_mdin_bus_expected_prev[5];
	end
	if (
		( D_mdin_bus_expected_prev[6] !== 1'bx ) && ( D_mdin_bus_prev[6] !== D_mdin_bus_expected_prev[6] )
		&& ((D_mdin_bus_expected_prev[6] !== last_D_mdin_bus_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D_mdin_bus_exp[6] = D_mdin_bus_expected_prev[6];
	end
	if (
		( D_mdin_bus_expected_prev[7] !== 1'bx ) && ( D_mdin_bus_prev[7] !== D_mdin_bus_expected_prev[7] )
		&& ((D_mdin_bus_expected_prev[7] !== last_D_mdin_bus_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D_mdin_bus_exp[7] = D_mdin_bus_expected_prev[7];
	end
	if (
		( D_mdin_bus_expected_prev[8] !== 1'bx ) && ( D_mdin_bus_prev[8] !== D_mdin_bus_expected_prev[8] )
		&& ((D_mdin_bus_expected_prev[8] !== last_D_mdin_bus_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D_mdin_bus_exp[8] = D_mdin_bus_expected_prev[8];
	end
	if (
		( D_mdin_bus_expected_prev[9] !== 1'bx ) && ( D_mdin_bus_prev[9] !== D_mdin_bus_expected_prev[9] )
		&& ((D_mdin_bus_expected_prev[9] !== last_D_mdin_bus_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D_mdin_bus_exp[9] = D_mdin_bus_expected_prev[9];
	end
	if (
		( D_mdin_bus_expected_prev[10] !== 1'bx ) && ( D_mdin_bus_prev[10] !== D_mdin_bus_expected_prev[10] )
		&& ((D_mdin_bus_expected_prev[10] !== last_D_mdin_bus_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D_mdin_bus_exp[10] = D_mdin_bus_expected_prev[10];
	end
	if (
		( D_mdin_bus_expected_prev[11] !== 1'bx ) && ( D_mdin_bus_prev[11] !== D_mdin_bus_expected_prev[11] )
		&& ((D_mdin_bus_expected_prev[11] !== last_D_mdin_bus_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D_mdin_bus_exp[11] = D_mdin_bus_expected_prev[11];
	end
	if (
		( D_mdin_bus_expected_prev[12] !== 1'bx ) && ( D_mdin_bus_prev[12] !== D_mdin_bus_expected_prev[12] )
		&& ((D_mdin_bus_expected_prev[12] !== last_D_mdin_bus_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D_mdin_bus_exp[12] = D_mdin_bus_expected_prev[12];
	end
	if (
		( D_mdin_bus_expected_prev[13] !== 1'bx ) && ( D_mdin_bus_prev[13] !== D_mdin_bus_expected_prev[13] )
		&& ((D_mdin_bus_expected_prev[13] !== last_D_mdin_bus_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D_mdin_bus_exp[13] = D_mdin_bus_expected_prev[13];
	end
	if (
		( D_mdin_bus_expected_prev[14] !== 1'bx ) && ( D_mdin_bus_prev[14] !== D_mdin_bus_expected_prev[14] )
		&& ((D_mdin_bus_expected_prev[14] !== last_D_mdin_bus_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D_mdin_bus_exp[14] = D_mdin_bus_expected_prev[14];
	end
	if (
		( D_mdin_bus_expected_prev[15] !== 1'bx ) && ( D_mdin_bus_prev[15] !== D_mdin_bus_expected_prev[15] )
		&& ((D_mdin_bus_expected_prev[15] !== last_D_mdin_bus_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D_mdin_bus_exp[15] = D_mdin_bus_expected_prev[15];
	end
	if (
		( D_mdout_bus_expected_prev[0] !== 1'bx ) && ( D_mdout_bus_prev[0] !== D_mdout_bus_expected_prev[0] )
		&& ((D_mdout_bus_expected_prev[0] !== last_D_mdout_bus_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdout_bus_exp[0] = D_mdout_bus_expected_prev[0];
	end
	if (
		( D_mdout_bus_expected_prev[1] !== 1'bx ) && ( D_mdout_bus_prev[1] !== D_mdout_bus_expected_prev[1] )
		&& ((D_mdout_bus_expected_prev[1] !== last_D_mdout_bus_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdout_bus_exp[1] = D_mdout_bus_expected_prev[1];
	end
	if (
		( D_mdout_bus_expected_prev[2] !== 1'bx ) && ( D_mdout_bus_prev[2] !== D_mdout_bus_expected_prev[2] )
		&& ((D_mdout_bus_expected_prev[2] !== last_D_mdout_bus_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdout_bus_exp[2] = D_mdout_bus_expected_prev[2];
	end
	if (
		( D_mdout_bus_expected_prev[3] !== 1'bx ) && ( D_mdout_bus_prev[3] !== D_mdout_bus_expected_prev[3] )
		&& ((D_mdout_bus_expected_prev[3] !== last_D_mdout_bus_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdout_bus_exp[3] = D_mdout_bus_expected_prev[3];
	end
	if (
		( D_mdout_bus_expected_prev[4] !== 1'bx ) && ( D_mdout_bus_prev[4] !== D_mdout_bus_expected_prev[4] )
		&& ((D_mdout_bus_expected_prev[4] !== last_D_mdout_bus_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdout_bus_exp[4] = D_mdout_bus_expected_prev[4];
	end
	if (
		( D_mdout_bus_expected_prev[5] !== 1'bx ) && ( D_mdout_bus_prev[5] !== D_mdout_bus_expected_prev[5] )
		&& ((D_mdout_bus_expected_prev[5] !== last_D_mdout_bus_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdout_bus_exp[5] = D_mdout_bus_expected_prev[5];
	end
	if (
		( D_mdout_bus_expected_prev[6] !== 1'bx ) && ( D_mdout_bus_prev[6] !== D_mdout_bus_expected_prev[6] )
		&& ((D_mdout_bus_expected_prev[6] !== last_D_mdout_bus_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdout_bus_exp[6] = D_mdout_bus_expected_prev[6];
	end
	if (
		( D_mdout_bus_expected_prev[7] !== 1'bx ) && ( D_mdout_bus_prev[7] !== D_mdout_bus_expected_prev[7] )
		&& ((D_mdout_bus_expected_prev[7] !== last_D_mdout_bus_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdout_bus_exp[7] = D_mdout_bus_expected_prev[7];
	end
	if (
		( D_mdout_bus_expected_prev[8] !== 1'bx ) && ( D_mdout_bus_prev[8] !== D_mdout_bus_expected_prev[8] )
		&& ((D_mdout_bus_expected_prev[8] !== last_D_mdout_bus_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdout_bus_exp[8] = D_mdout_bus_expected_prev[8];
	end
	if (
		( D_mdout_bus_expected_prev[9] !== 1'bx ) && ( D_mdout_bus_prev[9] !== D_mdout_bus_expected_prev[9] )
		&& ((D_mdout_bus_expected_prev[9] !== last_D_mdout_bus_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdout_bus_exp[9] = D_mdout_bus_expected_prev[9];
	end
	if (
		( D_mdout_bus_expected_prev[10] !== 1'bx ) && ( D_mdout_bus_prev[10] !== D_mdout_bus_expected_prev[10] )
		&& ((D_mdout_bus_expected_prev[10] !== last_D_mdout_bus_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdout_bus_exp[10] = D_mdout_bus_expected_prev[10];
	end
	if (
		( D_mdout_bus_expected_prev[11] !== 1'bx ) && ( D_mdout_bus_prev[11] !== D_mdout_bus_expected_prev[11] )
		&& ((D_mdout_bus_expected_prev[11] !== last_D_mdout_bus_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdout_bus_exp[11] = D_mdout_bus_expected_prev[11];
	end
	if (
		( D_mdout_bus_expected_prev[12] !== 1'bx ) && ( D_mdout_bus_prev[12] !== D_mdout_bus_expected_prev[12] )
		&& ((D_mdout_bus_expected_prev[12] !== last_D_mdout_bus_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdout_bus_exp[12] = D_mdout_bus_expected_prev[12];
	end
	if (
		( D_mdout_bus_expected_prev[13] !== 1'bx ) && ( D_mdout_bus_prev[13] !== D_mdout_bus_expected_prev[13] )
		&& ((D_mdout_bus_expected_prev[13] !== last_D_mdout_bus_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdout_bus_exp[13] = D_mdout_bus_expected_prev[13];
	end
	if (
		( D_mdout_bus_expected_prev[14] !== 1'bx ) && ( D_mdout_bus_prev[14] !== D_mdout_bus_expected_prev[14] )
		&& ((D_mdout_bus_expected_prev[14] !== last_D_mdout_bus_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdout_bus_exp[14] = D_mdout_bus_expected_prev[14];
	end
	if (
		( D_mdout_bus_expected_prev[15] !== 1'bx ) && ( D_mdout_bus_prev[15] !== D_mdout_bus_expected_prev[15] )
		&& ((D_mdout_bus_expected_prev[15] !== last_D_mdout_bus_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdout_bus_exp[15] = D_mdout_bus_expected_prev[15];
	end
	if (
		( D_mem_addr_expected_prev[0] !== 1'bx ) && ( D_mem_addr_prev[0] !== D_mem_addr_expected_prev[0] )
		&& ((D_mem_addr_expected_prev[0] !== last_D_mem_addr_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mem_addr_exp[0] = D_mem_addr_expected_prev[0];
	end
	if (
		( D_mem_addr_expected_prev[1] !== 1'bx ) && ( D_mem_addr_prev[1] !== D_mem_addr_expected_prev[1] )
		&& ((D_mem_addr_expected_prev[1] !== last_D_mem_addr_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mem_addr_exp[1] = D_mem_addr_expected_prev[1];
	end
	if (
		( D_mem_addr_expected_prev[2] !== 1'bx ) && ( D_mem_addr_prev[2] !== D_mem_addr_expected_prev[2] )
		&& ((D_mem_addr_expected_prev[2] !== last_D_mem_addr_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mem_addr_exp[2] = D_mem_addr_expected_prev[2];
	end
	if (
		( D_mem_addr_expected_prev[3] !== 1'bx ) && ( D_mem_addr_prev[3] !== D_mem_addr_expected_prev[3] )
		&& ((D_mem_addr_expected_prev[3] !== last_D_mem_addr_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mem_addr_exp[3] = D_mem_addr_expected_prev[3];
	end
	if (
		( D_mem_addr_expected_prev[4] !== 1'bx ) && ( D_mem_addr_prev[4] !== D_mem_addr_expected_prev[4] )
		&& ((D_mem_addr_expected_prev[4] !== last_D_mem_addr_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mem_addr_exp[4] = D_mem_addr_expected_prev[4];
	end
	if (
		( D_mem_addr_expected_prev[5] !== 1'bx ) && ( D_mem_addr_prev[5] !== D_mem_addr_expected_prev[5] )
		&& ((D_mem_addr_expected_prev[5] !== last_D_mem_addr_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mem_addr_exp[5] = D_mem_addr_expected_prev[5];
	end
	if (
		( D_mem_addr_expected_prev[6] !== 1'bx ) && ( D_mem_addr_prev[6] !== D_mem_addr_expected_prev[6] )
		&& ((D_mem_addr_expected_prev[6] !== last_D_mem_addr_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mem_addr_exp[6] = D_mem_addr_expected_prev[6];
	end
	if (
		( D_mem_addr_expected_prev[7] !== 1'bx ) && ( D_mem_addr_prev[7] !== D_mem_addr_expected_prev[7] )
		&& ((D_mem_addr_expected_prev[7] !== last_D_mem_addr_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mem_addr_exp[7] = D_mem_addr_expected_prev[7];
	end
	if (
		( D_mem_addr_expected_prev[8] !== 1'bx ) && ( D_mem_addr_prev[8] !== D_mem_addr_expected_prev[8] )
		&& ((D_mem_addr_expected_prev[8] !== last_D_mem_addr_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mem_addr_exp[8] = D_mem_addr_expected_prev[8];
	end
	if (
		( D_mem_addr_expected_prev[9] !== 1'bx ) && ( D_mem_addr_prev[9] !== D_mem_addr_expected_prev[9] )
		&& ((D_mem_addr_expected_prev[9] !== last_D_mem_addr_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mem_addr_exp[9] = D_mem_addr_expected_prev[9];
	end
	if (
		( D_mem_addr_expected_prev[10] !== 1'bx ) && ( D_mem_addr_prev[10] !== D_mem_addr_expected_prev[10] )
		&& ((D_mem_addr_expected_prev[10] !== last_D_mem_addr_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mem_addr_exp[10] = D_mem_addr_expected_prev[10];
	end
	if (
		( D_mem_addr_expected_prev[11] !== 1'bx ) && ( D_mem_addr_prev[11] !== D_mem_addr_expected_prev[11] )
		&& ((D_mem_addr_expected_prev[11] !== last_D_mem_addr_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mem_addr_exp[11] = D_mem_addr_expected_prev[11];
	end
	if (
		( D_Mre_expected_prev !== 1'bx ) && ( D_Mre_prev !== D_Mre_expected_prev )
		&& ((D_Mre_expected_prev !== last_D_Mre_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_Mre :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_Mre_expected_prev);
		$display ("     Real value = %b", D_Mre_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D_Mre_exp = D_Mre_expected_prev;
	end
	if (
		( D_Mwe_expected_prev !== 1'bx ) && ( D_Mwe_prev !== D_Mwe_expected_prev )
		&& ((D_Mwe_expected_prev !== last_D_Mwe_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_Mwe :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_Mwe_expected_prev);
		$display ("     Real value = %b", D_Mwe_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_D_Mwe_exp = D_Mwe_expected_prev;
	end
	if (
		( D_PCld_expected_prev !== 1'bx ) && ( D_PCld_prev !== D_PCld_expected_prev )
		&& ((D_PCld_expected_prev !== last_D_PCld_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_PCld :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_PCld_expected_prev);
		$display ("     Real value = %b", D_PCld_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D_PCld_exp = D_PCld_expected_prev;
	end
	if (
		( D_rfout_bus_expected_prev[0] !== 1'bx ) && ( D_rfout_bus_prev[0] !== D_rfout_bus_expected_prev[0] )
		&& ((D_rfout_bus_expected_prev[0] !== last_D_rfout_bus_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D_rfout_bus_exp[0] = D_rfout_bus_expected_prev[0];
	end
	if (
		( D_rfout_bus_expected_prev[1] !== 1'bx ) && ( D_rfout_bus_prev[1] !== D_rfout_bus_expected_prev[1] )
		&& ((D_rfout_bus_expected_prev[1] !== last_D_rfout_bus_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D_rfout_bus_exp[1] = D_rfout_bus_expected_prev[1];
	end
	if (
		( D_rfout_bus_expected_prev[2] !== 1'bx ) && ( D_rfout_bus_prev[2] !== D_rfout_bus_expected_prev[2] )
		&& ((D_rfout_bus_expected_prev[2] !== last_D_rfout_bus_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D_rfout_bus_exp[2] = D_rfout_bus_expected_prev[2];
	end
	if (
		( D_rfout_bus_expected_prev[3] !== 1'bx ) && ( D_rfout_bus_prev[3] !== D_rfout_bus_expected_prev[3] )
		&& ((D_rfout_bus_expected_prev[3] !== last_D_rfout_bus_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D_rfout_bus_exp[3] = D_rfout_bus_expected_prev[3];
	end
	if (
		( D_rfout_bus_expected_prev[4] !== 1'bx ) && ( D_rfout_bus_prev[4] !== D_rfout_bus_expected_prev[4] )
		&& ((D_rfout_bus_expected_prev[4] !== last_D_rfout_bus_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D_rfout_bus_exp[4] = D_rfout_bus_expected_prev[4];
	end
	if (
		( D_rfout_bus_expected_prev[5] !== 1'bx ) && ( D_rfout_bus_prev[5] !== D_rfout_bus_expected_prev[5] )
		&& ((D_rfout_bus_expected_prev[5] !== last_D_rfout_bus_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D_rfout_bus_exp[5] = D_rfout_bus_expected_prev[5];
	end
	if (
		( D_rfout_bus_expected_prev[6] !== 1'bx ) && ( D_rfout_bus_prev[6] !== D_rfout_bus_expected_prev[6] )
		&& ((D_rfout_bus_expected_prev[6] !== last_D_rfout_bus_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D_rfout_bus_exp[6] = D_rfout_bus_expected_prev[6];
	end
	if (
		( D_rfout_bus_expected_prev[7] !== 1'bx ) && ( D_rfout_bus_prev[7] !== D_rfout_bus_expected_prev[7] )
		&& ((D_rfout_bus_expected_prev[7] !== last_D_rfout_bus_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D_rfout_bus_exp[7] = D_rfout_bus_expected_prev[7];
	end
	if (
		( D_rfout_bus_expected_prev[8] !== 1'bx ) && ( D_rfout_bus_prev[8] !== D_rfout_bus_expected_prev[8] )
		&& ((D_rfout_bus_expected_prev[8] !== last_D_rfout_bus_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D_rfout_bus_exp[8] = D_rfout_bus_expected_prev[8];
	end
	if (
		( D_rfout_bus_expected_prev[9] !== 1'bx ) && ( D_rfout_bus_prev[9] !== D_rfout_bus_expected_prev[9] )
		&& ((D_rfout_bus_expected_prev[9] !== last_D_rfout_bus_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D_rfout_bus_exp[9] = D_rfout_bus_expected_prev[9];
	end
	if (
		( D_rfout_bus_expected_prev[10] !== 1'bx ) && ( D_rfout_bus_prev[10] !== D_rfout_bus_expected_prev[10] )
		&& ((D_rfout_bus_expected_prev[10] !== last_D_rfout_bus_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D_rfout_bus_exp[10] = D_rfout_bus_expected_prev[10];
	end
	if (
		( D_rfout_bus_expected_prev[11] !== 1'bx ) && ( D_rfout_bus_prev[11] !== D_rfout_bus_expected_prev[11] )
		&& ((D_rfout_bus_expected_prev[11] !== last_D_rfout_bus_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D_rfout_bus_exp[11] = D_rfout_bus_expected_prev[11];
	end
	if (
		( D_rfout_bus_expected_prev[12] !== 1'bx ) && ( D_rfout_bus_prev[12] !== D_rfout_bus_expected_prev[12] )
		&& ((D_rfout_bus_expected_prev[12] !== last_D_rfout_bus_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D_rfout_bus_exp[12] = D_rfout_bus_expected_prev[12];
	end
	if (
		( D_rfout_bus_expected_prev[13] !== 1'bx ) && ( D_rfout_bus_prev[13] !== D_rfout_bus_expected_prev[13] )
		&& ((D_rfout_bus_expected_prev[13] !== last_D_rfout_bus_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D_rfout_bus_exp[13] = D_rfout_bus_expected_prev[13];
	end
	if (
		( D_rfout_bus_expected_prev[14] !== 1'bx ) && ( D_rfout_bus_prev[14] !== D_rfout_bus_expected_prev[14] )
		&& ((D_rfout_bus_expected_prev[14] !== last_D_rfout_bus_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D_rfout_bus_exp[14] = D_rfout_bus_expected_prev[14];
	end
	if (
		( D_rfout_bus_expected_prev[15] !== 1'bx ) && ( D_rfout_bus_prev[15] !== D_rfout_bus_expected_prev[15] )
		&& ((D_rfout_bus_expected_prev[15] !== last_D_rfout_bus_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D_rfout_bus_exp[15] = D_rfout_bus_expected_prev[15];
	end
	if (
		( D_RFr1a_expected_prev[0] !== 1'bx ) && ( D_RFr1a_prev[0] !== D_RFr1a_expected_prev[0] )
		&& ((D_RFr1a_expected_prev[0] !== last_D_RFr1a_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFr1a[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFr1a_expected_prev);
		$display ("     Real value = %b", D_RFr1a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D_RFr1a_exp[0] = D_RFr1a_expected_prev[0];
	end
	if (
		( D_RFr1a_expected_prev[1] !== 1'bx ) && ( D_RFr1a_prev[1] !== D_RFr1a_expected_prev[1] )
		&& ((D_RFr1a_expected_prev[1] !== last_D_RFr1a_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFr1a[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFr1a_expected_prev);
		$display ("     Real value = %b", D_RFr1a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D_RFr1a_exp[1] = D_RFr1a_expected_prev[1];
	end
	if (
		( D_RFr1a_expected_prev[2] !== 1'bx ) && ( D_RFr1a_prev[2] !== D_RFr1a_expected_prev[2] )
		&& ((D_RFr1a_expected_prev[2] !== last_D_RFr1a_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFr1a[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFr1a_expected_prev);
		$display ("     Real value = %b", D_RFr1a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D_RFr1a_exp[2] = D_RFr1a_expected_prev[2];
	end
	if (
		( D_RFr1a_expected_prev[3] !== 1'bx ) && ( D_RFr1a_prev[3] !== D_RFr1a_expected_prev[3] )
		&& ((D_RFr1a_expected_prev[3] !== last_D_RFr1a_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFr1a[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFr1a_expected_prev);
		$display ("     Real value = %b", D_RFr1a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D_RFr1a_exp[3] = D_RFr1a_expected_prev[3];
	end
	if (
		( D_RFr1e_expected_prev !== 1'bx ) && ( D_RFr1e_prev !== D_RFr1e_expected_prev )
		&& ((D_RFr1e_expected_prev !== last_D_RFr1e_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFr1e :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFr1e_expected_prev);
		$display ("     Real value = %b", D_RFr1e_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_D_RFr1e_exp = D_RFr1e_expected_prev;
	end
	if (
		( D_RFr2a_expected_prev[0] !== 1'bx ) && ( D_RFr2a_prev[0] !== D_RFr2a_expected_prev[0] )
		&& ((D_RFr2a_expected_prev[0] !== last_D_RFr2a_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFr2a[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFr2a_expected_prev);
		$display ("     Real value = %b", D_RFr2a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_D_RFr2a_exp[0] = D_RFr2a_expected_prev[0];
	end
	if (
		( D_RFr2a_expected_prev[1] !== 1'bx ) && ( D_RFr2a_prev[1] !== D_RFr2a_expected_prev[1] )
		&& ((D_RFr2a_expected_prev[1] !== last_D_RFr2a_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFr2a[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFr2a_expected_prev);
		$display ("     Real value = %b", D_RFr2a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_D_RFr2a_exp[1] = D_RFr2a_expected_prev[1];
	end
	if (
		( D_RFr2a_expected_prev[2] !== 1'bx ) && ( D_RFr2a_prev[2] !== D_RFr2a_expected_prev[2] )
		&& ((D_RFr2a_expected_prev[2] !== last_D_RFr2a_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFr2a[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFr2a_expected_prev);
		$display ("     Real value = %b", D_RFr2a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_D_RFr2a_exp[2] = D_RFr2a_expected_prev[2];
	end
	if (
		( D_RFr2a_expected_prev[3] !== 1'bx ) && ( D_RFr2a_prev[3] !== D_RFr2a_expected_prev[3] )
		&& ((D_RFr2a_expected_prev[3] !== last_D_RFr2a_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFr2a[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFr2a_expected_prev);
		$display ("     Real value = %b", D_RFr2a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_D_RFr2a_exp[3] = D_RFr2a_expected_prev[3];
	end
	if (
		( D_RFr2e_expected_prev !== 1'bx ) && ( D_RFr2e_prev !== D_RFr2e_expected_prev )
		&& ((D_RFr2e_expected_prev !== last_D_RFr2e_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFr2e :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFr2e_expected_prev);
		$display ("     Real value = %b", D_RFr2e_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_D_RFr2e_exp = D_RFr2e_expected_prev;
	end
	if (
		( D_RFs_expected_prev[0] !== 1'bx ) && ( D_RFs_prev[0] !== D_RFs_expected_prev[0] )
		&& ((D_RFs_expected_prev[0] !== last_D_RFs_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFs_expected_prev);
		$display ("     Real value = %b", D_RFs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_D_RFs_exp[0] = D_RFs_expected_prev[0];
	end
	if (
		( D_RFs_expected_prev[1] !== 1'bx ) && ( D_RFs_prev[1] !== D_RFs_expected_prev[1] )
		&& ((D_RFs_expected_prev[1] !== last_D_RFs_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFs_expected_prev);
		$display ("     Real value = %b", D_RFs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_D_RFs_exp[1] = D_RFs_expected_prev[1];
	end
	if (
		( D_RFwa_expected_prev[0] !== 1'bx ) && ( D_RFwa_prev[0] !== D_RFwa_expected_prev[0] )
		&& ((D_RFwa_expected_prev[0] !== last_D_RFwa_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFwa[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFwa_expected_prev);
		$display ("     Real value = %b", D_RFwa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_D_RFwa_exp[0] = D_RFwa_expected_prev[0];
	end
	if (
		( D_RFwa_expected_prev[1] !== 1'bx ) && ( D_RFwa_prev[1] !== D_RFwa_expected_prev[1] )
		&& ((D_RFwa_expected_prev[1] !== last_D_RFwa_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFwa[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFwa_expected_prev);
		$display ("     Real value = %b", D_RFwa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_D_RFwa_exp[1] = D_RFwa_expected_prev[1];
	end
	if (
		( D_RFwa_expected_prev[2] !== 1'bx ) && ( D_RFwa_prev[2] !== D_RFwa_expected_prev[2] )
		&& ((D_RFwa_expected_prev[2] !== last_D_RFwa_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFwa[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFwa_expected_prev);
		$display ("     Real value = %b", D_RFwa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_D_RFwa_exp[2] = D_RFwa_expected_prev[2];
	end
	if (
		( D_RFwa_expected_prev[3] !== 1'bx ) && ( D_RFwa_prev[3] !== D_RFwa_expected_prev[3] )
		&& ((D_RFwa_expected_prev[3] !== last_D_RFwa_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFwa[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFwa_expected_prev);
		$display ("     Real value = %b", D_RFwa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_D_RFwa_exp[3] = D_RFwa_expected_prev[3];
	end
	if (
		( D_RFwe_expected_prev !== 1'bx ) && ( D_RFwe_prev !== D_RFwe_expected_prev )
		&& ((D_RFwe_expected_prev !== last_D_RFwe_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFwe :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFwe_expected_prev);
		$display ("     Real value = %b", D_RFwe_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_D_RFwe_exp = D_RFwe_expected_prev;
	end
	if (
		( state_cpu_expected_prev[0] !== 1'bx ) && ( state_cpu_prev[0] !== state_cpu_expected_prev[0] )
		&& ((state_cpu_expected_prev[0] !== last_state_cpu_exp[0]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_state_cpu_exp[0] = state_cpu_expected_prev[0];
	end
	if (
		( state_cpu_expected_prev[1] !== 1'bx ) && ( state_cpu_prev[1] !== state_cpu_expected_prev[1] )
		&& ((state_cpu_expected_prev[1] !== last_state_cpu_exp[1]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_state_cpu_exp[1] = state_cpu_expected_prev[1];
	end
	if (
		( state_cpu_expected_prev[2] !== 1'bx ) && ( state_cpu_prev[2] !== state_cpu_expected_prev[2] )
		&& ((state_cpu_expected_prev[2] !== last_state_cpu_exp[2]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_state_cpu_exp[2] = state_cpu_expected_prev[2];
	end
	if (
		( state_cpu_expected_prev[3] !== 1'bx ) && ( state_cpu_prev[3] !== state_cpu_expected_prev[3] )
		&& ((state_cpu_expected_prev[3] !== last_state_cpu_exp[3]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_state_cpu_exp[3] = state_cpu_expected_prev[3];
	end
	if (
		( state_cpu_expected_prev[4] !== 1'bx ) && ( state_cpu_prev[4] !== state_cpu_expected_prev[4] )
		&& ((state_cpu_expected_prev[4] !== last_state_cpu_exp[4]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_state_cpu_exp[4] = state_cpu_expected_prev[4];
	end
	if (
		( state_cpu_expected_prev[5] !== 1'bx ) && ( state_cpu_prev[5] !== state_cpu_expected_prev[5] )
		&& ((state_cpu_expected_prev[5] !== last_state_cpu_exp[5]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_state_cpu_exp[5] = state_cpu_expected_prev[5];
	end
	if (
		( state_cpu_expected_prev[6] !== 1'bx ) && ( state_cpu_prev[6] !== state_cpu_expected_prev[6] )
		&& ((state_cpu_expected_prev[6] !== last_state_cpu_exp[6]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_state_cpu_exp[6] = state_cpu_expected_prev[6];
	end
	if (
		( state_cpu_expected_prev[7] !== 1'bx ) && ( state_cpu_prev[7] !== state_cpu_expected_prev[7] )
		&& ((state_cpu_expected_prev[7] !== last_state_cpu_exp[7]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_state_cpu_exp[7] = state_cpu_expected_prev[7];
	end
	if (
		( state_cpu_expected_prev[8] !== 1'bx ) && ( state_cpu_prev[8] !== state_cpu_expected_prev[8] )
		&& ((state_cpu_expected_prev[8] !== last_state_cpu_exp[8]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_state_cpu_exp[8] = state_cpu_expected_prev[8];
	end
	if (
		( state_cpu_expected_prev[9] !== 1'bx ) && ( state_cpu_prev[9] !== state_cpu_expected_prev[9] )
		&& ((state_cpu_expected_prev[9] !== last_state_cpu_exp[9]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_state_cpu_exp[9] = state_cpu_expected_prev[9];
	end
	if (
		( state_cpu_expected_prev[10] !== 1'bx ) && ( state_cpu_prev[10] !== state_cpu_expected_prev[10] )
		&& ((state_cpu_expected_prev[10] !== last_state_cpu_exp[10]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_state_cpu_exp[10] = state_cpu_expected_prev[10];
	end
	if (
		( state_cpu_expected_prev[11] !== 1'bx ) && ( state_cpu_prev[11] !== state_cpu_expected_prev[11] )
		&& ((state_cpu_expected_prev[11] !== last_state_cpu_exp[11]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_state_cpu_exp[11] = state_cpu_expected_prev[11];
	end
	if (
		( sys_output_expected_prev[0] !== 1'bx ) && ( sys_output_prev[0] !== sys_output_expected_prev[0] )
		&& ((sys_output_expected_prev[0] !== last_sys_output_exp[0]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_sys_output_exp[0] = sys_output_expected_prev[0];
	end
	if (
		( sys_output_expected_prev[1] !== 1'bx ) && ( sys_output_prev[1] !== sys_output_expected_prev[1] )
		&& ((sys_output_expected_prev[1] !== last_sys_output_exp[1]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_sys_output_exp[1] = sys_output_expected_prev[1];
	end
	if (
		( sys_output_expected_prev[2] !== 1'bx ) && ( sys_output_prev[2] !== sys_output_expected_prev[2] )
		&& ((sys_output_expected_prev[2] !== last_sys_output_exp[2]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_sys_output_exp[2] = sys_output_expected_prev[2];
	end
	if (
		( sys_output_expected_prev[3] !== 1'bx ) && ( sys_output_prev[3] !== sys_output_expected_prev[3] )
		&& ((sys_output_expected_prev[3] !== last_sys_output_exp[3]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_sys_output_exp[3] = sys_output_expected_prev[3];
	end
	if (
		( sys_output_expected_prev[4] !== 1'bx ) && ( sys_output_prev[4] !== sys_output_expected_prev[4] )
		&& ((sys_output_expected_prev[4] !== last_sys_output_exp[4]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_sys_output_exp[4] = sys_output_expected_prev[4];
	end
	if (
		( sys_output_expected_prev[5] !== 1'bx ) && ( sys_output_prev[5] !== sys_output_expected_prev[5] )
		&& ((sys_output_expected_prev[5] !== last_sys_output_exp[5]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_sys_output_exp[5] = sys_output_expected_prev[5];
	end
	if (
		( sys_output_expected_prev[6] !== 1'bx ) && ( sys_output_prev[6] !== sys_output_expected_prev[6] )
		&& ((sys_output_expected_prev[6] !== last_sys_output_exp[6]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_sys_output_exp[6] = sys_output_expected_prev[6];
	end
	if (
		( sys_output_expected_prev[7] !== 1'bx ) && ( sys_output_prev[7] !== sys_output_expected_prev[7] )
		&& ((sys_output_expected_prev[7] !== last_sys_output_exp[7]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_sys_output_exp[7] = sys_output_expected_prev[7];
	end
	if (
		( sys_output_expected_prev[8] !== 1'bx ) && ( sys_output_prev[8] !== sys_output_expected_prev[8] )
		&& ((sys_output_expected_prev[8] !== last_sys_output_exp[8]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_sys_output_exp[8] = sys_output_expected_prev[8];
	end
	if (
		( sys_output_expected_prev[9] !== 1'bx ) && ( sys_output_prev[9] !== sys_output_expected_prev[9] )
		&& ((sys_output_expected_prev[9] !== last_sys_output_exp[9]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_sys_output_exp[9] = sys_output_expected_prev[9];
	end
	if (
		( sys_output_expected_prev[10] !== 1'bx ) && ( sys_output_prev[10] !== sys_output_expected_prev[10] )
		&& ((sys_output_expected_prev[10] !== last_sys_output_exp[10]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_sys_output_exp[10] = sys_output_expected_prev[10];
	end
	if (
		( sys_output_expected_prev[11] !== 1'bx ) && ( sys_output_prev[11] !== sys_output_expected_prev[11] )
		&& ((sys_output_expected_prev[11] !== last_sys_output_exp[11]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_sys_output_exp[11] = sys_output_expected_prev[11];
	end
	if (
		( sys_output_expected_prev[12] !== 1'bx ) && ( sys_output_prev[12] !== sys_output_expected_prev[12] )
		&& ((sys_output_expected_prev[12] !== last_sys_output_exp[12]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_sys_output_exp[12] = sys_output_expected_prev[12];
	end
	if (
		( sys_output_expected_prev[13] !== 1'bx ) && ( sys_output_prev[13] !== sys_output_expected_prev[13] )
		&& ((sys_output_expected_prev[13] !== last_sys_output_exp[13]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_sys_output_exp[13] = sys_output_expected_prev[13];
	end
	if (
		( sys_output_expected_prev[14] !== 1'bx ) && ( sys_output_prev[14] !== sys_output_expected_prev[14] )
		&& ((sys_output_expected_prev[14] !== last_sys_output_exp[14]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_sys_output_exp[14] = sys_output_expected_prev[14];
	end
	if (
		( sys_output_expected_prev[15] !== 1'bx ) && ( sys_output_prev[15] !== sys_output_expected_prev[15] )
		&& ((sys_output_expected_prev[15] !== last_sys_output_exp[15]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_sys_output_exp[15] = sys_output_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#60000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module SimpleCompArch_vlg_vec_tst();
// constants                                           
// general purpose registers
reg sys_clk;
reg sys_rst;
// wires                                               
wire [3:0] cache_state_d;
wire [3:0] cont_state_d;
wire controller_en_d;
wire [1:0] D_ALUs;
wire D_jpz;
wire [15:0] D_mdin_bus;
wire [15:0] D_mdout_bus;
wire [11:0] D_mem_addr;
wire D_Mre;
wire D_Mwe;
wire D_PCld;
wire [15:0] D_rfout_bus;
wire [3:0] D_RFr1a;
wire D_RFr1e;
wire [3:0] D_RFr2a;
wire D_RFr2e;
wire [1:0] D_RFs;
wire [3:0] D_RFwa;
wire D_RFwe;
wire [11:0] state_cpu;
wire [15:0] sys_output;

wire sampler;                             

// assign statements (if any)                          
SimpleCompArch i1 (
// port map - connection between master ports and signals/registers   
	.cache_state_d(cache_state_d),
	.cont_state_d(cont_state_d),
	.controller_en_d(controller_en_d),
	.D_ALUs(D_ALUs),
	.D_jpz(D_jpz),
	.D_mdin_bus(D_mdin_bus),
	.D_mdout_bus(D_mdout_bus),
	.D_mem_addr(D_mem_addr),
	.D_Mre(D_Mre),
	.D_Mwe(D_Mwe),
	.D_PCld(D_PCld),
	.D_rfout_bus(D_rfout_bus),
	.D_RFr1a(D_RFr1a),
	.D_RFr1e(D_RFr1e),
	.D_RFr2a(D_RFr2a),
	.D_RFr2e(D_RFr2e),
	.D_RFs(D_RFs),
	.D_RFwa(D_RFwa),
	.D_RFwe(D_RFwe),
	.state_cpu(state_cpu),
	.sys_clk(sys_clk),
	.sys_output(sys_output),
	.sys_rst(sys_rst)
);

// sys_clk
always
begin
	sys_clk = 1'b0;
	sys_clk = #10000 1'b1;
	#10000;
end 

// sys_rst
initial
begin
	sys_rst = 1'b1;
	sys_rst = #40000 1'b0;
end 

SimpleCompArch_vlg_sample_tst tb_sample (
	.sys_clk(sys_clk),
	.sys_rst(sys_rst),
	.sampler_tx(sampler)
);

SimpleCompArch_vlg_check_tst tb_out(
	.cache_state_d(cache_state_d),
	.cont_state_d(cont_state_d),
	.controller_en_d(controller_en_d),
	.D_ALUs(D_ALUs),
	.D_jpz(D_jpz),
	.D_mdin_bus(D_mdin_bus),
	.D_mdout_bus(D_mdout_bus),
	.D_mem_addr(D_mem_addr),
	.D_Mre(D_Mre),
	.D_Mwe(D_Mwe),
	.D_PCld(D_PCld),
	.D_rfout_bus(D_rfout_bus),
	.D_RFr1a(D_RFr1a),
	.D_RFr1e(D_RFr1e),
	.D_RFr2a(D_RFr2a),
	.D_RFr2e(D_RFr2e),
	.D_RFs(D_RFs),
	.D_RFwa(D_RFwa),
	.D_RFwe(D_RFwe),
	.state_cpu(state_cpu),
	.sys_output(sys_output),
	.sampler_rx(sampler)
);
endmodule

