// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/25/2016 22:45:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    SimpleCompArch
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SimpleCompArch_vlg_sample_tst(
	sys_clk,
	sys_rst,
	sampler_tx
);
input  sys_clk;
input  sys_rst;
output sampler_tx;

reg sample;
time current_time;
always @(sys_clk or sys_rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module SimpleCompArch_vlg_check_tst (
	cache_en_d,
	cache_state_d,
	cont_state_d,
	controller_en_d,
	D_ALUs,
	D_jpz,
	D_mdin_bus,
	D_mdout_bus,
	D_mem_addr,
	D_Mre,
	D_Mwe,
	D_PCld,
	D_rfout_bus,
	D_RFr1a,
	D_RFr1e,
	D_RFr2a,
	D_RFr2e,
	D_RFs,
	D_RFwa,
	D_RFwe,
	done_write_back_d,
	lineIndex_d,
	reg_in_data,
	reg_out_data_1,
	reg_out_data_2,
	state_cpu,
	sys_output,
	tagIndex_d,
	tempDataIn_d,
	tempDataOut_d,
	write_back_block,
	write_back_mem,
	write_block_controller_sig,
	sampler_rx
);
input  cache_en_d;
input [3:0] cache_state_d;
input [3:0] cont_state_d;
input  controller_en_d;
input [1:0] D_ALUs;
input  D_jpz;
input [15:0] D_mdin_bus;
input [15:0] D_mdout_bus;
input [11:0] D_mem_addr;
input  D_Mre;
input  D_Mwe;
input  D_PCld;
input [15:0] D_rfout_bus;
input [3:0] D_RFr1a;
input  D_RFr1e;
input [3:0] D_RFr2a;
input  D_RFr2e;
input [1:0] D_RFs;
input [3:0] D_RFwa;
input  D_RFwe;
input  done_write_back_d;
input [2:0] lineIndex_d;
input [15:0] reg_in_data;
input [15:0] reg_out_data_1;
input [15:0] reg_out_data_2;
input [11:0] state_cpu;
input [15:0] sys_output;
input [6:0] tagIndex_d;
input [15:0] tempDataIn_d;
input [15:0] tempDataOut_d;
input [63:0] write_back_block;
input  write_back_mem;
input  write_block_controller_sig;
input sampler_rx;

reg  cache_en_d_expected;
reg [3:0] cache_state_d_expected;
reg [3:0] cont_state_d_expected;
reg  controller_en_d_expected;
reg [1:0] D_ALUs_expected;
reg  D_jpz_expected;
reg [15:0] D_mdin_bus_expected;
reg [15:0] D_mdout_bus_expected;
reg [11:0] D_mem_addr_expected;
reg  D_Mre_expected;
reg  D_Mwe_expected;
reg  D_PCld_expected;
reg [15:0] D_rfout_bus_expected;
reg [3:0] D_RFr1a_expected;
reg  D_RFr1e_expected;
reg [3:0] D_RFr2a_expected;
reg  D_RFr2e_expected;
reg [1:0] D_RFs_expected;
reg [3:0] D_RFwa_expected;
reg  D_RFwe_expected;
reg  done_write_back_d_expected;
reg [2:0] lineIndex_d_expected;
reg [15:0] reg_in_data_expected;
reg [15:0] reg_out_data_1_expected;
reg [15:0] reg_out_data_2_expected;
reg [11:0] state_cpu_expected;
reg [15:0] sys_output_expected;
reg [6:0] tagIndex_d_expected;
reg [15:0] tempDataIn_d_expected;
reg [15:0] tempDataOut_d_expected;
reg [63:0] write_back_block_expected;
reg  write_back_mem_expected;
reg  write_block_controller_sig_expected;

reg  cache_en_d_prev;
reg [3:0] cache_state_d_prev;
reg [3:0] cont_state_d_prev;
reg  controller_en_d_prev;
reg [1:0] D_ALUs_prev;
reg  D_jpz_prev;
reg [15:0] D_mdin_bus_prev;
reg [15:0] D_mdout_bus_prev;
reg [11:0] D_mem_addr_prev;
reg  D_Mre_prev;
reg  D_Mwe_prev;
reg  D_PCld_prev;
reg [15:0] D_rfout_bus_prev;
reg [3:0] D_RFr1a_prev;
reg  D_RFr1e_prev;
reg [3:0] D_RFr2a_prev;
reg  D_RFr2e_prev;
reg [1:0] D_RFs_prev;
reg [3:0] D_RFwa_prev;
reg  D_RFwe_prev;
reg  done_write_back_d_prev;
reg [2:0] lineIndex_d_prev;
reg [15:0] reg_in_data_prev;
reg [15:0] reg_out_data_1_prev;
reg [15:0] reg_out_data_2_prev;
reg [11:0] state_cpu_prev;
reg [15:0] sys_output_prev;
reg [6:0] tagIndex_d_prev;
reg [15:0] tempDataIn_d_prev;
reg [15:0] tempDataOut_d_prev;
reg [63:0] write_back_block_prev;
reg  write_back_mem_prev;
reg  write_block_controller_sig_prev;

reg  cache_en_d_expected_prev;
reg [3:0] cache_state_d_expected_prev;
reg [3:0] cont_state_d_expected_prev;
reg  controller_en_d_expected_prev;
reg [1:0] D_ALUs_expected_prev;
reg  D_jpz_expected_prev;
reg [15:0] D_mdin_bus_expected_prev;
reg [15:0] D_mdout_bus_expected_prev;
reg [11:0] D_mem_addr_expected_prev;
reg  D_Mre_expected_prev;
reg  D_Mwe_expected_prev;
reg  D_PCld_expected_prev;
reg [15:0] D_rfout_bus_expected_prev;
reg [3:0] D_RFr1a_expected_prev;
reg  D_RFr1e_expected_prev;
reg [3:0] D_RFr2a_expected_prev;
reg  D_RFr2e_expected_prev;
reg [1:0] D_RFs_expected_prev;
reg [3:0] D_RFwa_expected_prev;
reg  D_RFwe_expected_prev;
reg  done_write_back_d_expected_prev;
reg [2:0] lineIndex_d_expected_prev;
reg [15:0] reg_in_data_expected_prev;
reg [15:0] reg_out_data_1_expected_prev;
reg [15:0] reg_out_data_2_expected_prev;
reg [11:0] state_cpu_expected_prev;
reg [15:0] sys_output_expected_prev;
reg [6:0] tagIndex_d_expected_prev;
reg [15:0] tempDataIn_d_expected_prev;
reg [15:0] tempDataOut_d_expected_prev;
reg [63:0] write_back_block_expected_prev;
reg  write_back_mem_expected_prev;
reg  write_block_controller_sig_expected_prev;

reg  last_cache_en_d_exp;
reg [3:0] last_cache_state_d_exp;
reg [3:0] last_cont_state_d_exp;
reg  last_controller_en_d_exp;
reg [1:0] last_D_ALUs_exp;
reg  last_D_jpz_exp;
reg [15:0] last_D_mdin_bus_exp;
reg [15:0] last_D_mdout_bus_exp;
reg [11:0] last_D_mem_addr_exp;
reg  last_D_Mre_exp;
reg  last_D_Mwe_exp;
reg  last_D_PCld_exp;
reg [15:0] last_D_rfout_bus_exp;
reg [3:0] last_D_RFr1a_exp;
reg  last_D_RFr1e_exp;
reg [3:0] last_D_RFr2a_exp;
reg  last_D_RFr2e_exp;
reg [1:0] last_D_RFs_exp;
reg [3:0] last_D_RFwa_exp;
reg  last_D_RFwe_exp;
reg  last_done_write_back_d_exp;
reg [2:0] last_lineIndex_d_exp;
reg [15:0] last_reg_in_data_exp;
reg [15:0] last_reg_out_data_1_exp;
reg [15:0] last_reg_out_data_2_exp;
reg [11:0] last_state_cpu_exp;
reg [15:0] last_sys_output_exp;
reg [6:0] last_tagIndex_d_exp;
reg [15:0] last_tempDataIn_d_exp;
reg [15:0] last_tempDataOut_d_exp;
reg [63:0] last_write_back_block_exp;
reg  last_write_back_mem_exp;
reg  last_write_block_controller_sig_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:33] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 33'b1;
end

// update real /o prevs

always @(trigger)
begin
	cache_en_d_prev = cache_en_d;
	cache_state_d_prev = cache_state_d;
	cont_state_d_prev = cont_state_d;
	controller_en_d_prev = controller_en_d;
	D_ALUs_prev = D_ALUs;
	D_jpz_prev = D_jpz;
	D_mdin_bus_prev = D_mdin_bus;
	D_mdout_bus_prev = D_mdout_bus;
	D_mem_addr_prev = D_mem_addr;
	D_Mre_prev = D_Mre;
	D_Mwe_prev = D_Mwe;
	D_PCld_prev = D_PCld;
	D_rfout_bus_prev = D_rfout_bus;
	D_RFr1a_prev = D_RFr1a;
	D_RFr1e_prev = D_RFr1e;
	D_RFr2a_prev = D_RFr2a;
	D_RFr2e_prev = D_RFr2e;
	D_RFs_prev = D_RFs;
	D_RFwa_prev = D_RFwa;
	D_RFwe_prev = D_RFwe;
	done_write_back_d_prev = done_write_back_d;
	lineIndex_d_prev = lineIndex_d;
	reg_in_data_prev = reg_in_data;
	reg_out_data_1_prev = reg_out_data_1;
	reg_out_data_2_prev = reg_out_data_2;
	state_cpu_prev = state_cpu;
	sys_output_prev = sys_output;
	tagIndex_d_prev = tagIndex_d;
	tempDataIn_d_prev = tempDataIn_d;
	tempDataOut_d_prev = tempDataOut_d;
	write_back_block_prev = write_back_block;
	write_back_mem_prev = write_back_mem;
	write_block_controller_sig_prev = write_block_controller_sig;
end

// update expected /o prevs

always @(trigger)
begin
	cache_en_d_expected_prev = cache_en_d_expected;
	cache_state_d_expected_prev = cache_state_d_expected;
	cont_state_d_expected_prev = cont_state_d_expected;
	controller_en_d_expected_prev = controller_en_d_expected;
	D_ALUs_expected_prev = D_ALUs_expected;
	D_jpz_expected_prev = D_jpz_expected;
	D_mdin_bus_expected_prev = D_mdin_bus_expected;
	D_mdout_bus_expected_prev = D_mdout_bus_expected;
	D_mem_addr_expected_prev = D_mem_addr_expected;
	D_Mre_expected_prev = D_Mre_expected;
	D_Mwe_expected_prev = D_Mwe_expected;
	D_PCld_expected_prev = D_PCld_expected;
	D_rfout_bus_expected_prev = D_rfout_bus_expected;
	D_RFr1a_expected_prev = D_RFr1a_expected;
	D_RFr1e_expected_prev = D_RFr1e_expected;
	D_RFr2a_expected_prev = D_RFr2a_expected;
	D_RFr2e_expected_prev = D_RFr2e_expected;
	D_RFs_expected_prev = D_RFs_expected;
	D_RFwa_expected_prev = D_RFwa_expected;
	D_RFwe_expected_prev = D_RFwe_expected;
	done_write_back_d_expected_prev = done_write_back_d_expected;
	lineIndex_d_expected_prev = lineIndex_d_expected;
	reg_in_data_expected_prev = reg_in_data_expected;
	reg_out_data_1_expected_prev = reg_out_data_1_expected;
	reg_out_data_2_expected_prev = reg_out_data_2_expected;
	state_cpu_expected_prev = state_cpu_expected;
	sys_output_expected_prev = sys_output_expected;
	tagIndex_d_expected_prev = tagIndex_d_expected;
	tempDataIn_d_expected_prev = tempDataIn_d_expected;
	tempDataOut_d_expected_prev = tempDataOut_d_expected;
	write_back_block_expected_prev = write_back_block_expected;
	write_back_mem_expected_prev = write_back_mem_expected;
	write_block_controller_sig_expected_prev = write_block_controller_sig_expected;
end



// expected controller_en_d
initial
begin
	controller_en_d_expected = 1'bX;
end 

// expected cache_en_d
initial
begin
	cache_en_d_expected = 1'b1;
end 

// expected write_back_mem
initial
begin
	write_back_mem_expected = 1'bX;
end 

// expected done_write_back_d
initial
begin
	done_write_back_d_expected = 1'bX;
end 

// expected write_block_controller_sig
initial
begin
	write_block_controller_sig_expected = 1'bX;
end 
// expected write_back_block[ 63 ]
initial
begin
	write_back_block_expected[63] = 1'bX;
end 
// expected write_back_block[ 62 ]
initial
begin
	write_back_block_expected[62] = 1'bX;
end 
// expected write_back_block[ 61 ]
initial
begin
	write_back_block_expected[61] = 1'bX;
end 
// expected write_back_block[ 60 ]
initial
begin
	write_back_block_expected[60] = 1'bX;
end 
// expected write_back_block[ 59 ]
initial
begin
	write_back_block_expected[59] = 1'bX;
end 
// expected write_back_block[ 58 ]
initial
begin
	write_back_block_expected[58] = 1'bX;
end 
// expected write_back_block[ 57 ]
initial
begin
	write_back_block_expected[57] = 1'bX;
end 
// expected write_back_block[ 56 ]
initial
begin
	write_back_block_expected[56] = 1'bX;
end 
// expected write_back_block[ 55 ]
initial
begin
	write_back_block_expected[55] = 1'bX;
end 
// expected write_back_block[ 54 ]
initial
begin
	write_back_block_expected[54] = 1'bX;
end 
// expected write_back_block[ 53 ]
initial
begin
	write_back_block_expected[53] = 1'bX;
end 
// expected write_back_block[ 52 ]
initial
begin
	write_back_block_expected[52] = 1'bX;
end 
// expected write_back_block[ 51 ]
initial
begin
	write_back_block_expected[51] = 1'bX;
end 
// expected write_back_block[ 50 ]
initial
begin
	write_back_block_expected[50] = 1'bX;
end 
// expected write_back_block[ 49 ]
initial
begin
	write_back_block_expected[49] = 1'bX;
end 
// expected write_back_block[ 48 ]
initial
begin
	write_back_block_expected[48] = 1'bX;
end 
// expected write_back_block[ 47 ]
initial
begin
	write_back_block_expected[47] = 1'bX;
end 
// expected write_back_block[ 46 ]
initial
begin
	write_back_block_expected[46] = 1'bX;
end 
// expected write_back_block[ 45 ]
initial
begin
	write_back_block_expected[45] = 1'bX;
end 
// expected write_back_block[ 44 ]
initial
begin
	write_back_block_expected[44] = 1'bX;
end 
// expected write_back_block[ 43 ]
initial
begin
	write_back_block_expected[43] = 1'bX;
end 
// expected write_back_block[ 42 ]
initial
begin
	write_back_block_expected[42] = 1'bX;
end 
// expected write_back_block[ 41 ]
initial
begin
	write_back_block_expected[41] = 1'bX;
end 
// expected write_back_block[ 40 ]
initial
begin
	write_back_block_expected[40] = 1'bX;
end 
// expected write_back_block[ 39 ]
initial
begin
	write_back_block_expected[39] = 1'bX;
end 
// expected write_back_block[ 38 ]
initial
begin
	write_back_block_expected[38] = 1'bX;
end 
// expected write_back_block[ 37 ]
initial
begin
	write_back_block_expected[37] = 1'bX;
end 
// expected write_back_block[ 36 ]
initial
begin
	write_back_block_expected[36] = 1'bX;
end 
// expected write_back_block[ 35 ]
initial
begin
	write_back_block_expected[35] = 1'bX;
end 
// expected write_back_block[ 34 ]
initial
begin
	write_back_block_expected[34] = 1'bX;
end 
// expected write_back_block[ 33 ]
initial
begin
	write_back_block_expected[33] = 1'bX;
end 
// expected write_back_block[ 32 ]
initial
begin
	write_back_block_expected[32] = 1'bX;
end 
// expected write_back_block[ 31 ]
initial
begin
	write_back_block_expected[31] = 1'bX;
end 
// expected write_back_block[ 30 ]
initial
begin
	write_back_block_expected[30] = 1'bX;
end 
// expected write_back_block[ 29 ]
initial
begin
	write_back_block_expected[29] = 1'bX;
end 
// expected write_back_block[ 28 ]
initial
begin
	write_back_block_expected[28] = 1'bX;
end 
// expected write_back_block[ 27 ]
initial
begin
	write_back_block_expected[27] = 1'bX;
end 
// expected write_back_block[ 26 ]
initial
begin
	write_back_block_expected[26] = 1'bX;
end 
// expected write_back_block[ 25 ]
initial
begin
	write_back_block_expected[25] = 1'bX;
end 
// expected write_back_block[ 24 ]
initial
begin
	write_back_block_expected[24] = 1'bX;
end 
// expected write_back_block[ 23 ]
initial
begin
	write_back_block_expected[23] = 1'bX;
end 
// expected write_back_block[ 22 ]
initial
begin
	write_back_block_expected[22] = 1'bX;
end 
// expected write_back_block[ 21 ]
initial
begin
	write_back_block_expected[21] = 1'bX;
end 
// expected write_back_block[ 20 ]
initial
begin
	write_back_block_expected[20] = 1'bX;
end 
// expected write_back_block[ 19 ]
initial
begin
	write_back_block_expected[19] = 1'bX;
end 
// expected write_back_block[ 18 ]
initial
begin
	write_back_block_expected[18] = 1'bX;
end 
// expected write_back_block[ 17 ]
initial
begin
	write_back_block_expected[17] = 1'bX;
end 
// expected write_back_block[ 16 ]
initial
begin
	write_back_block_expected[16] = 1'bX;
end 
// expected write_back_block[ 15 ]
initial
begin
	write_back_block_expected[15] = 1'bX;
end 
// expected write_back_block[ 14 ]
initial
begin
	write_back_block_expected[14] = 1'bX;
end 
// expected write_back_block[ 13 ]
initial
begin
	write_back_block_expected[13] = 1'bX;
end 
// expected write_back_block[ 12 ]
initial
begin
	write_back_block_expected[12] = 1'bX;
end 
// expected write_back_block[ 11 ]
initial
begin
	write_back_block_expected[11] = 1'bX;
end 
// expected write_back_block[ 10 ]
initial
begin
	write_back_block_expected[10] = 1'bX;
end 
// expected write_back_block[ 9 ]
initial
begin
	write_back_block_expected[9] = 1'bX;
end 
// expected write_back_block[ 8 ]
initial
begin
	write_back_block_expected[8] = 1'bX;
end 
// expected write_back_block[ 7 ]
initial
begin
	write_back_block_expected[7] = 1'bX;
end 
// expected write_back_block[ 6 ]
initial
begin
	write_back_block_expected[6] = 1'bX;
end 
// expected write_back_block[ 5 ]
initial
begin
	write_back_block_expected[5] = 1'bX;
end 
// expected write_back_block[ 4 ]
initial
begin
	write_back_block_expected[4] = 1'bX;
end 
// expected write_back_block[ 3 ]
initial
begin
	write_back_block_expected[3] = 1'bX;
end 
// expected write_back_block[ 2 ]
initial
begin
	write_back_block_expected[2] = 1'bX;
end 
// expected write_back_block[ 1 ]
initial
begin
	write_back_block_expected[1] = 1'bX;
end 
// expected write_back_block[ 0 ]
initial
begin
	write_back_block_expected[0] = 1'bX;
end 
// expected cache_state_d[ 3 ]
initial
begin
	cache_state_d_expected[3] = 1'bX;
end 
// expected cache_state_d[ 2 ]
initial
begin
	cache_state_d_expected[2] = 1'bX;
end 
// expected cache_state_d[ 1 ]
initial
begin
	cache_state_d_expected[1] = 1'bX;
end 
// expected cache_state_d[ 0 ]
initial
begin
	cache_state_d_expected[0] = 1'bX;
end 
// expected cont_state_d[ 3 ]
initial
begin
	cont_state_d_expected[3] = 1'bX;
end 
// expected cont_state_d[ 2 ]
initial
begin
	cont_state_d_expected[2] = 1'bX;
end 
// expected cont_state_d[ 1 ]
initial
begin
	cont_state_d_expected[1] = 1'bX;
end 
// expected cont_state_d[ 0 ]
initial
begin
	cont_state_d_expected[0] = 1'bX;
end 
// expected state_cpu[ 11 ]
initial
begin
	state_cpu_expected[11] = 1'bX;
end 
// expected state_cpu[ 10 ]
initial
begin
	state_cpu_expected[10] = 1'bX;
end 
// expected state_cpu[ 9 ]
initial
begin
	state_cpu_expected[9] = 1'bX;
end 
// expected state_cpu[ 8 ]
initial
begin
	state_cpu_expected[8] = 1'bX;
end 
// expected state_cpu[ 7 ]
initial
begin
	state_cpu_expected[7] = 1'bX;
end 
// expected state_cpu[ 6 ]
initial
begin
	state_cpu_expected[6] = 1'bX;
end 
// expected state_cpu[ 5 ]
initial
begin
	state_cpu_expected[5] = 1'bX;
end 
// expected state_cpu[ 4 ]
initial
begin
	state_cpu_expected[4] = 1'bX;
end 
// expected state_cpu[ 3 ]
initial
begin
	state_cpu_expected[3] = 1'bX;
end 
// expected state_cpu[ 2 ]
initial
begin
	state_cpu_expected[2] = 1'bX;
end 
// expected state_cpu[ 1 ]
initial
begin
	state_cpu_expected[1] = 1'bX;
end 
// expected state_cpu[ 0 ]
initial
begin
	state_cpu_expected[0] = 1'bX;
end 
// expected lineIndex_d[ 2 ]
initial
begin
	lineIndex_d_expected[2] = 1'bX;
end 
// expected lineIndex_d[ 1 ]
initial
begin
	lineIndex_d_expected[1] = 1'bX;
end 
// expected lineIndex_d[ 0 ]
initial
begin
	lineIndex_d_expected[0] = 1'bX;
end 
// expected tagIndex_d[ 6 ]
initial
begin
	tagIndex_d_expected[6] = 1'bX;
end 
// expected tagIndex_d[ 5 ]
initial
begin
	tagIndex_d_expected[5] = 1'bX;
end 
// expected tagIndex_d[ 4 ]
initial
begin
	tagIndex_d_expected[4] = 1'bX;
end 
// expected tagIndex_d[ 3 ]
initial
begin
	tagIndex_d_expected[3] = 1'bX;
end 
// expected tagIndex_d[ 2 ]
initial
begin
	tagIndex_d_expected[2] = 1'bX;
end 
// expected tagIndex_d[ 1 ]
initial
begin
	tagIndex_d_expected[1] = 1'bX;
end 
// expected tagIndex_d[ 0 ]
initial
begin
	tagIndex_d_expected[0] = 1'bX;
end 
// expected tempDataIn_d[ 15 ]
initial
begin
	tempDataIn_d_expected[15] = 1'bX;
end 
// expected tempDataIn_d[ 14 ]
initial
begin
	tempDataIn_d_expected[14] = 1'bX;
end 
// expected tempDataIn_d[ 13 ]
initial
begin
	tempDataIn_d_expected[13] = 1'bX;
end 
// expected tempDataIn_d[ 12 ]
initial
begin
	tempDataIn_d_expected[12] = 1'bX;
end 
// expected tempDataIn_d[ 11 ]
initial
begin
	tempDataIn_d_expected[11] = 1'bX;
end 
// expected tempDataIn_d[ 10 ]
initial
begin
	tempDataIn_d_expected[10] = 1'bX;
end 
// expected tempDataIn_d[ 9 ]
initial
begin
	tempDataIn_d_expected[9] = 1'bX;
end 
// expected tempDataIn_d[ 8 ]
initial
begin
	tempDataIn_d_expected[8] = 1'bX;
end 
// expected tempDataIn_d[ 7 ]
initial
begin
	tempDataIn_d_expected[7] = 1'bX;
end 
// expected tempDataIn_d[ 6 ]
initial
begin
	tempDataIn_d_expected[6] = 1'bX;
end 
// expected tempDataIn_d[ 5 ]
initial
begin
	tempDataIn_d_expected[5] = 1'bX;
end 
// expected tempDataIn_d[ 4 ]
initial
begin
	tempDataIn_d_expected[4] = 1'bX;
end 
// expected tempDataIn_d[ 3 ]
initial
begin
	tempDataIn_d_expected[3] = 1'bX;
end 
// expected tempDataIn_d[ 2 ]
initial
begin
	tempDataIn_d_expected[2] = 1'bX;
end 
// expected tempDataIn_d[ 1 ]
initial
begin
	tempDataIn_d_expected[1] = 1'bX;
end 
// expected tempDataIn_d[ 0 ]
initial
begin
	tempDataIn_d_expected[0] = 1'bX;
end 
// expected tempDataOut_d[ 15 ]
initial
begin
	tempDataOut_d_expected[15] = 1'bX;
end 
// expected tempDataOut_d[ 14 ]
initial
begin
	tempDataOut_d_expected[14] = 1'bX;
end 
// expected tempDataOut_d[ 13 ]
initial
begin
	tempDataOut_d_expected[13] = 1'bX;
end 
// expected tempDataOut_d[ 12 ]
initial
begin
	tempDataOut_d_expected[12] = 1'bX;
end 
// expected tempDataOut_d[ 11 ]
initial
begin
	tempDataOut_d_expected[11] = 1'bX;
end 
// expected tempDataOut_d[ 10 ]
initial
begin
	tempDataOut_d_expected[10] = 1'bX;
end 
// expected tempDataOut_d[ 9 ]
initial
begin
	tempDataOut_d_expected[9] = 1'bX;
end 
// expected tempDataOut_d[ 8 ]
initial
begin
	tempDataOut_d_expected[8] = 1'bX;
end 
// expected tempDataOut_d[ 7 ]
initial
begin
	tempDataOut_d_expected[7] = 1'bX;
end 
// expected tempDataOut_d[ 6 ]
initial
begin
	tempDataOut_d_expected[6] = 1'bX;
end 
// expected tempDataOut_d[ 5 ]
initial
begin
	tempDataOut_d_expected[5] = 1'bX;
end 
// expected tempDataOut_d[ 4 ]
initial
begin
	tempDataOut_d_expected[4] = 1'bX;
end 
// expected tempDataOut_d[ 3 ]
initial
begin
	tempDataOut_d_expected[3] = 1'bX;
end 
// expected tempDataOut_d[ 2 ]
initial
begin
	tempDataOut_d_expected[2] = 1'bX;
end 
// expected tempDataOut_d[ 1 ]
initial
begin
	tempDataOut_d_expected[1] = 1'bX;
end 
// expected tempDataOut_d[ 0 ]
initial
begin
	tempDataOut_d_expected[0] = 1'bX;
end 
// expected D_mem_addr[ 11 ]
initial
begin
	D_mem_addr_expected[11] = 1'bX;
end 
// expected D_mem_addr[ 10 ]
initial
begin
	D_mem_addr_expected[10] = 1'bX;
end 
// expected D_mem_addr[ 9 ]
initial
begin
	D_mem_addr_expected[9] = 1'bX;
end 
// expected D_mem_addr[ 8 ]
initial
begin
	D_mem_addr_expected[8] = 1'bX;
end 
// expected D_mem_addr[ 7 ]
initial
begin
	D_mem_addr_expected[7] = 1'bX;
end 
// expected D_mem_addr[ 6 ]
initial
begin
	D_mem_addr_expected[6] = 1'bX;
end 
// expected D_mem_addr[ 5 ]
initial
begin
	D_mem_addr_expected[5] = 1'bX;
end 
// expected D_mem_addr[ 4 ]
initial
begin
	D_mem_addr_expected[4] = 1'bX;
end 
// expected D_mem_addr[ 3 ]
initial
begin
	D_mem_addr_expected[3] = 1'bX;
end 
// expected D_mem_addr[ 2 ]
initial
begin
	D_mem_addr_expected[2] = 1'bX;
end 
// expected D_mem_addr[ 1 ]
initial
begin
	D_mem_addr_expected[1] = 1'bX;
end 
// expected D_mem_addr[ 0 ]
initial
begin
	D_mem_addr_expected[0] = 1'bX;
end 

// expected D_Mre
initial
begin
	D_Mre_expected = 1'bX;
end 

// expected D_Mwe
initial
begin
	D_Mwe_expected = 1'bX;
end 
// expected D_mdin_bus[ 15 ]
initial
begin
	D_mdin_bus_expected[15] = 1'bX;
end 
// expected D_mdin_bus[ 14 ]
initial
begin
	D_mdin_bus_expected[14] = 1'bX;
end 
// expected D_mdin_bus[ 13 ]
initial
begin
	D_mdin_bus_expected[13] = 1'bX;
end 
// expected D_mdin_bus[ 12 ]
initial
begin
	D_mdin_bus_expected[12] = 1'bX;
end 
// expected D_mdin_bus[ 11 ]
initial
begin
	D_mdin_bus_expected[11] = 1'bX;
end 
// expected D_mdin_bus[ 10 ]
initial
begin
	D_mdin_bus_expected[10] = 1'bX;
end 
// expected D_mdin_bus[ 9 ]
initial
begin
	D_mdin_bus_expected[9] = 1'bX;
end 
// expected D_mdin_bus[ 8 ]
initial
begin
	D_mdin_bus_expected[8] = 1'bX;
end 
// expected D_mdin_bus[ 7 ]
initial
begin
	D_mdin_bus_expected[7] = 1'bX;
end 
// expected D_mdin_bus[ 6 ]
initial
begin
	D_mdin_bus_expected[6] = 1'bX;
end 
// expected D_mdin_bus[ 5 ]
initial
begin
	D_mdin_bus_expected[5] = 1'bX;
end 
// expected D_mdin_bus[ 4 ]
initial
begin
	D_mdin_bus_expected[4] = 1'bX;
end 
// expected D_mdin_bus[ 3 ]
initial
begin
	D_mdin_bus_expected[3] = 1'bX;
end 
// expected D_mdin_bus[ 2 ]
initial
begin
	D_mdin_bus_expected[2] = 1'bX;
end 
// expected D_mdin_bus[ 1 ]
initial
begin
	D_mdin_bus_expected[1] = 1'bX;
end 
// expected D_mdin_bus[ 0 ]
initial
begin
	D_mdin_bus_expected[0] = 1'bX;
end 
// expected D_mdout_bus[ 15 ]
initial
begin
	D_mdout_bus_expected[15] = 1'bX;
end 
// expected D_mdout_bus[ 14 ]
initial
begin
	D_mdout_bus_expected[14] = 1'bX;
end 
// expected D_mdout_bus[ 13 ]
initial
begin
	D_mdout_bus_expected[13] = 1'bX;
end 
// expected D_mdout_bus[ 12 ]
initial
begin
	D_mdout_bus_expected[12] = 1'bX;
end 
// expected D_mdout_bus[ 11 ]
initial
begin
	D_mdout_bus_expected[11] = 1'bX;
end 
// expected D_mdout_bus[ 10 ]
initial
begin
	D_mdout_bus_expected[10] = 1'bX;
end 
// expected D_mdout_bus[ 9 ]
initial
begin
	D_mdout_bus_expected[9] = 1'bX;
end 
// expected D_mdout_bus[ 8 ]
initial
begin
	D_mdout_bus_expected[8] = 1'bX;
end 
// expected D_mdout_bus[ 7 ]
initial
begin
	D_mdout_bus_expected[7] = 1'bX;
end 
// expected D_mdout_bus[ 6 ]
initial
begin
	D_mdout_bus_expected[6] = 1'bX;
end 
// expected D_mdout_bus[ 5 ]
initial
begin
	D_mdout_bus_expected[5] = 1'bX;
end 
// expected D_mdout_bus[ 4 ]
initial
begin
	D_mdout_bus_expected[4] = 1'bX;
end 
// expected D_mdout_bus[ 3 ]
initial
begin
	D_mdout_bus_expected[3] = 1'bX;
end 
// expected D_mdout_bus[ 2 ]
initial
begin
	D_mdout_bus_expected[2] = 1'bX;
end 
// expected D_mdout_bus[ 1 ]
initial
begin
	D_mdout_bus_expected[1] = 1'bX;
end 
// expected D_mdout_bus[ 0 ]
initial
begin
	D_mdout_bus_expected[0] = 1'bX;
end 
// expected sys_output[ 15 ]
initial
begin
	sys_output_expected[15] = 1'bX;
end 
// expected sys_output[ 14 ]
initial
begin
	sys_output_expected[14] = 1'bX;
end 
// expected sys_output[ 13 ]
initial
begin
	sys_output_expected[13] = 1'bX;
end 
// expected sys_output[ 12 ]
initial
begin
	sys_output_expected[12] = 1'bX;
end 
// expected sys_output[ 11 ]
initial
begin
	sys_output_expected[11] = 1'bX;
end 
// expected sys_output[ 10 ]
initial
begin
	sys_output_expected[10] = 1'bX;
end 
// expected sys_output[ 9 ]
initial
begin
	sys_output_expected[9] = 1'bX;
end 
// expected sys_output[ 8 ]
initial
begin
	sys_output_expected[8] = 1'bX;
end 
// expected sys_output[ 7 ]
initial
begin
	sys_output_expected[7] = 1'bX;
end 
// expected sys_output[ 6 ]
initial
begin
	sys_output_expected[6] = 1'bX;
end 
// expected sys_output[ 5 ]
initial
begin
	sys_output_expected[5] = 1'bX;
end 
// expected sys_output[ 4 ]
initial
begin
	sys_output_expected[4] = 1'bX;
end 
// expected sys_output[ 3 ]
initial
begin
	sys_output_expected[3] = 1'bX;
end 
// expected sys_output[ 2 ]
initial
begin
	sys_output_expected[2] = 1'bX;
end 
// expected sys_output[ 1 ]
initial
begin
	sys_output_expected[1] = 1'bX;
end 
// expected sys_output[ 0 ]
initial
begin
	sys_output_expected[0] = 1'bX;
end 
// expected D_rfout_bus[ 15 ]
initial
begin
	D_rfout_bus_expected[15] = 1'bX;
end 
// expected D_rfout_bus[ 14 ]
initial
begin
	D_rfout_bus_expected[14] = 1'bX;
end 
// expected D_rfout_bus[ 13 ]
initial
begin
	D_rfout_bus_expected[13] = 1'bX;
end 
// expected D_rfout_bus[ 12 ]
initial
begin
	D_rfout_bus_expected[12] = 1'bX;
end 
// expected D_rfout_bus[ 11 ]
initial
begin
	D_rfout_bus_expected[11] = 1'bX;
end 
// expected D_rfout_bus[ 10 ]
initial
begin
	D_rfout_bus_expected[10] = 1'bX;
end 
// expected D_rfout_bus[ 9 ]
initial
begin
	D_rfout_bus_expected[9] = 1'bX;
end 
// expected D_rfout_bus[ 8 ]
initial
begin
	D_rfout_bus_expected[8] = 1'bX;
end 
// expected D_rfout_bus[ 7 ]
initial
begin
	D_rfout_bus_expected[7] = 1'bX;
end 
// expected D_rfout_bus[ 6 ]
initial
begin
	D_rfout_bus_expected[6] = 1'bX;
end 
// expected D_rfout_bus[ 5 ]
initial
begin
	D_rfout_bus_expected[5] = 1'bX;
end 
// expected D_rfout_bus[ 4 ]
initial
begin
	D_rfout_bus_expected[4] = 1'bX;
end 
// expected D_rfout_bus[ 3 ]
initial
begin
	D_rfout_bus_expected[3] = 1'bX;
end 
// expected D_rfout_bus[ 2 ]
initial
begin
	D_rfout_bus_expected[2] = 1'bX;
end 
// expected D_rfout_bus[ 1 ]
initial
begin
	D_rfout_bus_expected[1] = 1'bX;
end 
// expected D_rfout_bus[ 0 ]
initial
begin
	D_rfout_bus_expected[0] = 1'bX;
end 
// expected D_RFr1a[ 3 ]
initial
begin
	D_RFr1a_expected[3] = 1'bX;
end 
// expected D_RFr1a[ 2 ]
initial
begin
	D_RFr1a_expected[2] = 1'bX;
end 
// expected D_RFr1a[ 1 ]
initial
begin
	D_RFr1a_expected[1] = 1'bX;
end 
// expected D_RFr1a[ 0 ]
initial
begin
	D_RFr1a_expected[0] = 1'bX;
end 
// expected D_RFr2a[ 3 ]
initial
begin
	D_RFr2a_expected[3] = 1'bX;
end 
// expected D_RFr2a[ 2 ]
initial
begin
	D_RFr2a_expected[2] = 1'bX;
end 
// expected D_RFr2a[ 1 ]
initial
begin
	D_RFr2a_expected[1] = 1'bX;
end 
// expected D_RFr2a[ 0 ]
initial
begin
	D_RFr2a_expected[0] = 1'bX;
end 

// expected D_RFr1e
initial
begin
	D_RFr1e_expected = 1'bX;
end 

// expected D_RFr2e
initial
begin
	D_RFr2e_expected = 1'bX;
end 
// expected D_RFs[ 1 ]
initial
begin
	D_RFs_expected[1] = 1'bX;
end 
// expected D_RFs[ 0 ]
initial
begin
	D_RFs_expected[0] = 1'bX;
end 
// expected D_RFwa[ 3 ]
initial
begin
	D_RFwa_expected[3] = 1'bX;
end 
// expected D_RFwa[ 2 ]
initial
begin
	D_RFwa_expected[2] = 1'bX;
end 
// expected D_RFwa[ 1 ]
initial
begin
	D_RFwa_expected[1] = 1'bX;
end 
// expected D_RFwa[ 0 ]
initial
begin
	D_RFwa_expected[0] = 1'bX;
end 
// expected D_ALUs[ 1 ]
initial
begin
	D_ALUs_expected[1] = 1'bX;
end 
// expected D_ALUs[ 0 ]
initial
begin
	D_ALUs_expected[0] = 1'bX;
end 

// expected D_jpz
initial
begin
	D_jpz_expected = 1'bX;
end 

// expected D_PCld
initial
begin
	D_PCld_expected = 1'bX;
end 

// expected D_RFwe
initial
begin
	D_RFwe_expected = 1'bX;
end 
// expected reg_in_data[ 15 ]
initial
begin
	reg_in_data_expected[15] = 1'bX;
end 
// expected reg_in_data[ 14 ]
initial
begin
	reg_in_data_expected[14] = 1'bX;
end 
// expected reg_in_data[ 13 ]
initial
begin
	reg_in_data_expected[13] = 1'bX;
end 
// expected reg_in_data[ 12 ]
initial
begin
	reg_in_data_expected[12] = 1'bX;
end 
// expected reg_in_data[ 11 ]
initial
begin
	reg_in_data_expected[11] = 1'bX;
end 
// expected reg_in_data[ 10 ]
initial
begin
	reg_in_data_expected[10] = 1'bX;
end 
// expected reg_in_data[ 9 ]
initial
begin
	reg_in_data_expected[9] = 1'bX;
end 
// expected reg_in_data[ 8 ]
initial
begin
	reg_in_data_expected[8] = 1'bX;
end 
// expected reg_in_data[ 7 ]
initial
begin
	reg_in_data_expected[7] = 1'bX;
end 
// expected reg_in_data[ 6 ]
initial
begin
	reg_in_data_expected[6] = 1'bX;
end 
// expected reg_in_data[ 5 ]
initial
begin
	reg_in_data_expected[5] = 1'bX;
end 
// expected reg_in_data[ 4 ]
initial
begin
	reg_in_data_expected[4] = 1'bX;
end 
// expected reg_in_data[ 3 ]
initial
begin
	reg_in_data_expected[3] = 1'bX;
end 
// expected reg_in_data[ 2 ]
initial
begin
	reg_in_data_expected[2] = 1'bX;
end 
// expected reg_in_data[ 1 ]
initial
begin
	reg_in_data_expected[1] = 1'bX;
end 
// expected reg_in_data[ 0 ]
initial
begin
	reg_in_data_expected[0] = 1'bX;
end 
// expected reg_out_data_1[ 15 ]
initial
begin
	reg_out_data_1_expected[15] = 1'bX;
end 
// expected reg_out_data_1[ 14 ]
initial
begin
	reg_out_data_1_expected[14] = 1'bX;
end 
// expected reg_out_data_1[ 13 ]
initial
begin
	reg_out_data_1_expected[13] = 1'bX;
end 
// expected reg_out_data_1[ 12 ]
initial
begin
	reg_out_data_1_expected[12] = 1'bX;
end 
// expected reg_out_data_1[ 11 ]
initial
begin
	reg_out_data_1_expected[11] = 1'bX;
end 
// expected reg_out_data_1[ 10 ]
initial
begin
	reg_out_data_1_expected[10] = 1'bX;
end 
// expected reg_out_data_1[ 9 ]
initial
begin
	reg_out_data_1_expected[9] = 1'bX;
end 
// expected reg_out_data_1[ 8 ]
initial
begin
	reg_out_data_1_expected[8] = 1'bX;
end 
// expected reg_out_data_1[ 7 ]
initial
begin
	reg_out_data_1_expected[7] = 1'bX;
end 
// expected reg_out_data_1[ 6 ]
initial
begin
	reg_out_data_1_expected[6] = 1'bX;
end 
// expected reg_out_data_1[ 5 ]
initial
begin
	reg_out_data_1_expected[5] = 1'bX;
end 
// expected reg_out_data_1[ 4 ]
initial
begin
	reg_out_data_1_expected[4] = 1'bX;
end 
// expected reg_out_data_1[ 3 ]
initial
begin
	reg_out_data_1_expected[3] = 1'bX;
end 
// expected reg_out_data_1[ 2 ]
initial
begin
	reg_out_data_1_expected[2] = 1'bX;
end 
// expected reg_out_data_1[ 1 ]
initial
begin
	reg_out_data_1_expected[1] = 1'bX;
end 
// expected reg_out_data_1[ 0 ]
initial
begin
	reg_out_data_1_expected[0] = 1'bX;
end 
// expected reg_out_data_2[ 15 ]
initial
begin
	reg_out_data_2_expected[15] = 1'bX;
end 
// expected reg_out_data_2[ 14 ]
initial
begin
	reg_out_data_2_expected[14] = 1'bX;
end 
// expected reg_out_data_2[ 13 ]
initial
begin
	reg_out_data_2_expected[13] = 1'bX;
end 
// expected reg_out_data_2[ 12 ]
initial
begin
	reg_out_data_2_expected[12] = 1'bX;
end 
// expected reg_out_data_2[ 11 ]
initial
begin
	reg_out_data_2_expected[11] = 1'bX;
end 
// expected reg_out_data_2[ 10 ]
initial
begin
	reg_out_data_2_expected[10] = 1'bX;
end 
// expected reg_out_data_2[ 9 ]
initial
begin
	reg_out_data_2_expected[9] = 1'bX;
end 
// expected reg_out_data_2[ 8 ]
initial
begin
	reg_out_data_2_expected[8] = 1'bX;
end 
// expected reg_out_data_2[ 7 ]
initial
begin
	reg_out_data_2_expected[7] = 1'bX;
end 
// expected reg_out_data_2[ 6 ]
initial
begin
	reg_out_data_2_expected[6] = 1'bX;
end 
// expected reg_out_data_2[ 5 ]
initial
begin
	reg_out_data_2_expected[5] = 1'bX;
end 
// expected reg_out_data_2[ 4 ]
initial
begin
	reg_out_data_2_expected[4] = 1'bX;
end 
// expected reg_out_data_2[ 3 ]
initial
begin
	reg_out_data_2_expected[3] = 1'bX;
end 
// expected reg_out_data_2[ 2 ]
initial
begin
	reg_out_data_2_expected[2] = 1'bX;
end 
// expected reg_out_data_2[ 1 ]
initial
begin
	reg_out_data_2_expected[1] = 1'bX;
end 
// expected reg_out_data_2[ 0 ]
initial
begin
	reg_out_data_2_expected[0] = 1'bX;
end 
// generate trigger
always @(cache_en_d_expected or cache_en_d or cache_state_d_expected or cache_state_d or cont_state_d_expected or cont_state_d or controller_en_d_expected or controller_en_d or D_ALUs_expected or D_ALUs or D_jpz_expected or D_jpz or D_mdin_bus_expected or D_mdin_bus or D_mdout_bus_expected or D_mdout_bus or D_mem_addr_expected or D_mem_addr or D_Mre_expected or D_Mre or D_Mwe_expected or D_Mwe or D_PCld_expected or D_PCld or D_rfout_bus_expected or D_rfout_bus or D_RFr1a_expected or D_RFr1a or D_RFr1e_expected or D_RFr1e or D_RFr2a_expected or D_RFr2a or D_RFr2e_expected or D_RFr2e or D_RFs_expected or D_RFs or D_RFwa_expected or D_RFwa or D_RFwe_expected or D_RFwe or done_write_back_d_expected or done_write_back_d or lineIndex_d_expected or lineIndex_d or reg_in_data_expected or reg_in_data or reg_out_data_1_expected or reg_out_data_1 or reg_out_data_2_expected or reg_out_data_2 or state_cpu_expected or state_cpu or sys_output_expected or sys_output or tagIndex_d_expected or tagIndex_d or tempDataIn_d_expected or tempDataIn_d or tempDataOut_d_expected or tempDataOut_d or write_back_block_expected or write_back_block or write_back_mem_expected or write_back_mem or write_block_controller_sig_expected or write_block_controller_sig)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cache_en_d = %b | expected cache_state_d = %b | expected cont_state_d = %b | expected controller_en_d = %b | expected D_ALUs = %b | expected D_jpz = %b | expected D_mdin_bus = %b | expected D_mdout_bus = %b | expected D_mem_addr = %b | expected D_Mre = %b | expected D_Mwe = %b | expected D_PCld = %b | expected D_rfout_bus = %b | expected D_RFr1a = %b | expected D_RFr1e = %b | expected D_RFr2a = %b | expected D_RFr2e = %b | expected D_RFs = %b | expected D_RFwa = %b | expected D_RFwe = %b | expected done_write_back_d = %b | expected lineIndex_d = %b | expected reg_in_data = %b | expected reg_out_data_1 = %b | expected reg_out_data_2 = %b | expected state_cpu = %b | expected sys_output = %b | expected tagIndex_d = %b | expected tempDataIn_d = %b | expected tempDataOut_d = %b | expected write_back_block = %b | expected write_back_mem = %b | expected write_block_controller_sig = %b | ",cache_en_d_expected_prev,cache_state_d_expected_prev,cont_state_d_expected_prev,controller_en_d_expected_prev,D_ALUs_expected_prev,D_jpz_expected_prev,D_mdin_bus_expected_prev,D_mdout_bus_expected_prev,D_mem_addr_expected_prev,D_Mre_expected_prev,D_Mwe_expected_prev,D_PCld_expected_prev,D_rfout_bus_expected_prev,D_RFr1a_expected_prev,D_RFr1e_expected_prev,D_RFr2a_expected_prev,D_RFr2e_expected_prev,D_RFs_expected_prev,D_RFwa_expected_prev,D_RFwe_expected_prev,done_write_back_d_expected_prev,lineIndex_d_expected_prev,reg_in_data_expected_prev,reg_out_data_1_expected_prev,reg_out_data_2_expected_prev,state_cpu_expected_prev,sys_output_expected_prev,tagIndex_d_expected_prev,tempDataIn_d_expected_prev,tempDataOut_d_expected_prev,write_back_block_expected_prev,write_back_mem_expected_prev,write_block_controller_sig_expected_prev);
	$display("| real cache_en_d = %b | real cache_state_d = %b | real cont_state_d = %b | real controller_en_d = %b | real D_ALUs = %b | real D_jpz = %b | real D_mdin_bus = %b | real D_mdout_bus = %b | real D_mem_addr = %b | real D_Mre = %b | real D_Mwe = %b | real D_PCld = %b | real D_rfout_bus = %b | real D_RFr1a = %b | real D_RFr1e = %b | real D_RFr2a = %b | real D_RFr2e = %b | real D_RFs = %b | real D_RFwa = %b | real D_RFwe = %b | real done_write_back_d = %b | real lineIndex_d = %b | real reg_in_data = %b | real reg_out_data_1 = %b | real reg_out_data_2 = %b | real state_cpu = %b | real sys_output = %b | real tagIndex_d = %b | real tempDataIn_d = %b | real tempDataOut_d = %b | real write_back_block = %b | real write_back_mem = %b | real write_block_controller_sig = %b | ",cache_en_d_prev,cache_state_d_prev,cont_state_d_prev,controller_en_d_prev,D_ALUs_prev,D_jpz_prev,D_mdin_bus_prev,D_mdout_bus_prev,D_mem_addr_prev,D_Mre_prev,D_Mwe_prev,D_PCld_prev,D_rfout_bus_prev,D_RFr1a_prev,D_RFr1e_prev,D_RFr2a_prev,D_RFr2e_prev,D_RFs_prev,D_RFwa_prev,D_RFwe_prev,done_write_back_d_prev,lineIndex_d_prev,reg_in_data_prev,reg_out_data_1_prev,reg_out_data_2_prev,state_cpu_prev,sys_output_prev,tagIndex_d_prev,tempDataIn_d_prev,tempDataOut_d_prev,write_back_block_prev,write_back_mem_prev,write_block_controller_sig_prev);
`endif
	if (
		( cache_en_d_expected_prev !== 1'bx ) && ( cache_en_d_prev !== cache_en_d_expected_prev )
		&& ((cache_en_d_expected_prev !== last_cache_en_d_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cache_en_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cache_en_d_expected_prev);
		$display ("     Real value = %b", cache_en_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cache_en_d_exp = cache_en_d_expected_prev;
	end
	if (
		( cache_state_d_expected_prev[0] !== 1'bx ) && ( cache_state_d_prev[0] !== cache_state_d_expected_prev[0] )
		&& ((cache_state_d_expected_prev[0] !== last_cache_state_d_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cache_state_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cache_state_d_expected_prev);
		$display ("     Real value = %b", cache_state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cache_state_d_exp[0] = cache_state_d_expected_prev[0];
	end
	if (
		( cache_state_d_expected_prev[1] !== 1'bx ) && ( cache_state_d_prev[1] !== cache_state_d_expected_prev[1] )
		&& ((cache_state_d_expected_prev[1] !== last_cache_state_d_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cache_state_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cache_state_d_expected_prev);
		$display ("     Real value = %b", cache_state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cache_state_d_exp[1] = cache_state_d_expected_prev[1];
	end
	if (
		( cache_state_d_expected_prev[2] !== 1'bx ) && ( cache_state_d_prev[2] !== cache_state_d_expected_prev[2] )
		&& ((cache_state_d_expected_prev[2] !== last_cache_state_d_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cache_state_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cache_state_d_expected_prev);
		$display ("     Real value = %b", cache_state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cache_state_d_exp[2] = cache_state_d_expected_prev[2];
	end
	if (
		( cache_state_d_expected_prev[3] !== 1'bx ) && ( cache_state_d_prev[3] !== cache_state_d_expected_prev[3] )
		&& ((cache_state_d_expected_prev[3] !== last_cache_state_d_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cache_state_d[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cache_state_d_expected_prev);
		$display ("     Real value = %b", cache_state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cache_state_d_exp[3] = cache_state_d_expected_prev[3];
	end
	if (
		( cont_state_d_expected_prev[0] !== 1'bx ) && ( cont_state_d_prev[0] !== cont_state_d_expected_prev[0] )
		&& ((cont_state_d_expected_prev[0] !== last_cont_state_d_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_state_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_state_d_expected_prev);
		$display ("     Real value = %b", cont_state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cont_state_d_exp[0] = cont_state_d_expected_prev[0];
	end
	if (
		( cont_state_d_expected_prev[1] !== 1'bx ) && ( cont_state_d_prev[1] !== cont_state_d_expected_prev[1] )
		&& ((cont_state_d_expected_prev[1] !== last_cont_state_d_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_state_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_state_d_expected_prev);
		$display ("     Real value = %b", cont_state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cont_state_d_exp[1] = cont_state_d_expected_prev[1];
	end
	if (
		( cont_state_d_expected_prev[2] !== 1'bx ) && ( cont_state_d_prev[2] !== cont_state_d_expected_prev[2] )
		&& ((cont_state_d_expected_prev[2] !== last_cont_state_d_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_state_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_state_d_expected_prev);
		$display ("     Real value = %b", cont_state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cont_state_d_exp[2] = cont_state_d_expected_prev[2];
	end
	if (
		( cont_state_d_expected_prev[3] !== 1'bx ) && ( cont_state_d_prev[3] !== cont_state_d_expected_prev[3] )
		&& ((cont_state_d_expected_prev[3] !== last_cont_state_d_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cont_state_d[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cont_state_d_expected_prev);
		$display ("     Real value = %b", cont_state_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cont_state_d_exp[3] = cont_state_d_expected_prev[3];
	end
	if (
		( controller_en_d_expected_prev !== 1'bx ) && ( controller_en_d_prev !== controller_en_d_expected_prev )
		&& ((controller_en_d_expected_prev !== last_controller_en_d_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port controller_en_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", controller_en_d_expected_prev);
		$display ("     Real value = %b", controller_en_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_controller_en_d_exp = controller_en_d_expected_prev;
	end
	if (
		( D_ALUs_expected_prev[0] !== 1'bx ) && ( D_ALUs_prev[0] !== D_ALUs_expected_prev[0] )
		&& ((D_ALUs_expected_prev[0] !== last_D_ALUs_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_ALUs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_ALUs_expected_prev);
		$display ("     Real value = %b", D_ALUs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D_ALUs_exp[0] = D_ALUs_expected_prev[0];
	end
	if (
		( D_ALUs_expected_prev[1] !== 1'bx ) && ( D_ALUs_prev[1] !== D_ALUs_expected_prev[1] )
		&& ((D_ALUs_expected_prev[1] !== last_D_ALUs_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_ALUs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_ALUs_expected_prev);
		$display ("     Real value = %b", D_ALUs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D_ALUs_exp[1] = D_ALUs_expected_prev[1];
	end
	if (
		( D_jpz_expected_prev !== 1'bx ) && ( D_jpz_prev !== D_jpz_expected_prev )
		&& ((D_jpz_expected_prev !== last_D_jpz_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_jpz :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_jpz_expected_prev);
		$display ("     Real value = %b", D_jpz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D_jpz_exp = D_jpz_expected_prev;
	end
	if (
		( D_mdin_bus_expected_prev[0] !== 1'bx ) && ( D_mdin_bus_prev[0] !== D_mdin_bus_expected_prev[0] )
		&& ((D_mdin_bus_expected_prev[0] !== last_D_mdin_bus_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdin_bus_exp[0] = D_mdin_bus_expected_prev[0];
	end
	if (
		( D_mdin_bus_expected_prev[1] !== 1'bx ) && ( D_mdin_bus_prev[1] !== D_mdin_bus_expected_prev[1] )
		&& ((D_mdin_bus_expected_prev[1] !== last_D_mdin_bus_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdin_bus_exp[1] = D_mdin_bus_expected_prev[1];
	end
	if (
		( D_mdin_bus_expected_prev[2] !== 1'bx ) && ( D_mdin_bus_prev[2] !== D_mdin_bus_expected_prev[2] )
		&& ((D_mdin_bus_expected_prev[2] !== last_D_mdin_bus_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdin_bus_exp[2] = D_mdin_bus_expected_prev[2];
	end
	if (
		( D_mdin_bus_expected_prev[3] !== 1'bx ) && ( D_mdin_bus_prev[3] !== D_mdin_bus_expected_prev[3] )
		&& ((D_mdin_bus_expected_prev[3] !== last_D_mdin_bus_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdin_bus_exp[3] = D_mdin_bus_expected_prev[3];
	end
	if (
		( D_mdin_bus_expected_prev[4] !== 1'bx ) && ( D_mdin_bus_prev[4] !== D_mdin_bus_expected_prev[4] )
		&& ((D_mdin_bus_expected_prev[4] !== last_D_mdin_bus_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdin_bus_exp[4] = D_mdin_bus_expected_prev[4];
	end
	if (
		( D_mdin_bus_expected_prev[5] !== 1'bx ) && ( D_mdin_bus_prev[5] !== D_mdin_bus_expected_prev[5] )
		&& ((D_mdin_bus_expected_prev[5] !== last_D_mdin_bus_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdin_bus_exp[5] = D_mdin_bus_expected_prev[5];
	end
	if (
		( D_mdin_bus_expected_prev[6] !== 1'bx ) && ( D_mdin_bus_prev[6] !== D_mdin_bus_expected_prev[6] )
		&& ((D_mdin_bus_expected_prev[6] !== last_D_mdin_bus_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdin_bus_exp[6] = D_mdin_bus_expected_prev[6];
	end
	if (
		( D_mdin_bus_expected_prev[7] !== 1'bx ) && ( D_mdin_bus_prev[7] !== D_mdin_bus_expected_prev[7] )
		&& ((D_mdin_bus_expected_prev[7] !== last_D_mdin_bus_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdin_bus_exp[7] = D_mdin_bus_expected_prev[7];
	end
	if (
		( D_mdin_bus_expected_prev[8] !== 1'bx ) && ( D_mdin_bus_prev[8] !== D_mdin_bus_expected_prev[8] )
		&& ((D_mdin_bus_expected_prev[8] !== last_D_mdin_bus_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdin_bus_exp[8] = D_mdin_bus_expected_prev[8];
	end
	if (
		( D_mdin_bus_expected_prev[9] !== 1'bx ) && ( D_mdin_bus_prev[9] !== D_mdin_bus_expected_prev[9] )
		&& ((D_mdin_bus_expected_prev[9] !== last_D_mdin_bus_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdin_bus_exp[9] = D_mdin_bus_expected_prev[9];
	end
	if (
		( D_mdin_bus_expected_prev[10] !== 1'bx ) && ( D_mdin_bus_prev[10] !== D_mdin_bus_expected_prev[10] )
		&& ((D_mdin_bus_expected_prev[10] !== last_D_mdin_bus_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdin_bus_exp[10] = D_mdin_bus_expected_prev[10];
	end
	if (
		( D_mdin_bus_expected_prev[11] !== 1'bx ) && ( D_mdin_bus_prev[11] !== D_mdin_bus_expected_prev[11] )
		&& ((D_mdin_bus_expected_prev[11] !== last_D_mdin_bus_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdin_bus_exp[11] = D_mdin_bus_expected_prev[11];
	end
	if (
		( D_mdin_bus_expected_prev[12] !== 1'bx ) && ( D_mdin_bus_prev[12] !== D_mdin_bus_expected_prev[12] )
		&& ((D_mdin_bus_expected_prev[12] !== last_D_mdin_bus_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdin_bus_exp[12] = D_mdin_bus_expected_prev[12];
	end
	if (
		( D_mdin_bus_expected_prev[13] !== 1'bx ) && ( D_mdin_bus_prev[13] !== D_mdin_bus_expected_prev[13] )
		&& ((D_mdin_bus_expected_prev[13] !== last_D_mdin_bus_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdin_bus_exp[13] = D_mdin_bus_expected_prev[13];
	end
	if (
		( D_mdin_bus_expected_prev[14] !== 1'bx ) && ( D_mdin_bus_prev[14] !== D_mdin_bus_expected_prev[14] )
		&& ((D_mdin_bus_expected_prev[14] !== last_D_mdin_bus_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdin_bus_exp[14] = D_mdin_bus_expected_prev[14];
	end
	if (
		( D_mdin_bus_expected_prev[15] !== 1'bx ) && ( D_mdin_bus_prev[15] !== D_mdin_bus_expected_prev[15] )
		&& ((D_mdin_bus_expected_prev[15] !== last_D_mdin_bus_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdin_bus[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdin_bus_expected_prev);
		$display ("     Real value = %b", D_mdin_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D_mdin_bus_exp[15] = D_mdin_bus_expected_prev[15];
	end
	if (
		( D_mdout_bus_expected_prev[0] !== 1'bx ) && ( D_mdout_bus_prev[0] !== D_mdout_bus_expected_prev[0] )
		&& ((D_mdout_bus_expected_prev[0] !== last_D_mdout_bus_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mdout_bus_exp[0] = D_mdout_bus_expected_prev[0];
	end
	if (
		( D_mdout_bus_expected_prev[1] !== 1'bx ) && ( D_mdout_bus_prev[1] !== D_mdout_bus_expected_prev[1] )
		&& ((D_mdout_bus_expected_prev[1] !== last_D_mdout_bus_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mdout_bus_exp[1] = D_mdout_bus_expected_prev[1];
	end
	if (
		( D_mdout_bus_expected_prev[2] !== 1'bx ) && ( D_mdout_bus_prev[2] !== D_mdout_bus_expected_prev[2] )
		&& ((D_mdout_bus_expected_prev[2] !== last_D_mdout_bus_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mdout_bus_exp[2] = D_mdout_bus_expected_prev[2];
	end
	if (
		( D_mdout_bus_expected_prev[3] !== 1'bx ) && ( D_mdout_bus_prev[3] !== D_mdout_bus_expected_prev[3] )
		&& ((D_mdout_bus_expected_prev[3] !== last_D_mdout_bus_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mdout_bus_exp[3] = D_mdout_bus_expected_prev[3];
	end
	if (
		( D_mdout_bus_expected_prev[4] !== 1'bx ) && ( D_mdout_bus_prev[4] !== D_mdout_bus_expected_prev[4] )
		&& ((D_mdout_bus_expected_prev[4] !== last_D_mdout_bus_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mdout_bus_exp[4] = D_mdout_bus_expected_prev[4];
	end
	if (
		( D_mdout_bus_expected_prev[5] !== 1'bx ) && ( D_mdout_bus_prev[5] !== D_mdout_bus_expected_prev[5] )
		&& ((D_mdout_bus_expected_prev[5] !== last_D_mdout_bus_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mdout_bus_exp[5] = D_mdout_bus_expected_prev[5];
	end
	if (
		( D_mdout_bus_expected_prev[6] !== 1'bx ) && ( D_mdout_bus_prev[6] !== D_mdout_bus_expected_prev[6] )
		&& ((D_mdout_bus_expected_prev[6] !== last_D_mdout_bus_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mdout_bus_exp[6] = D_mdout_bus_expected_prev[6];
	end
	if (
		( D_mdout_bus_expected_prev[7] !== 1'bx ) && ( D_mdout_bus_prev[7] !== D_mdout_bus_expected_prev[7] )
		&& ((D_mdout_bus_expected_prev[7] !== last_D_mdout_bus_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mdout_bus_exp[7] = D_mdout_bus_expected_prev[7];
	end
	if (
		( D_mdout_bus_expected_prev[8] !== 1'bx ) && ( D_mdout_bus_prev[8] !== D_mdout_bus_expected_prev[8] )
		&& ((D_mdout_bus_expected_prev[8] !== last_D_mdout_bus_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mdout_bus_exp[8] = D_mdout_bus_expected_prev[8];
	end
	if (
		( D_mdout_bus_expected_prev[9] !== 1'bx ) && ( D_mdout_bus_prev[9] !== D_mdout_bus_expected_prev[9] )
		&& ((D_mdout_bus_expected_prev[9] !== last_D_mdout_bus_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mdout_bus_exp[9] = D_mdout_bus_expected_prev[9];
	end
	if (
		( D_mdout_bus_expected_prev[10] !== 1'bx ) && ( D_mdout_bus_prev[10] !== D_mdout_bus_expected_prev[10] )
		&& ((D_mdout_bus_expected_prev[10] !== last_D_mdout_bus_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mdout_bus_exp[10] = D_mdout_bus_expected_prev[10];
	end
	if (
		( D_mdout_bus_expected_prev[11] !== 1'bx ) && ( D_mdout_bus_prev[11] !== D_mdout_bus_expected_prev[11] )
		&& ((D_mdout_bus_expected_prev[11] !== last_D_mdout_bus_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mdout_bus_exp[11] = D_mdout_bus_expected_prev[11];
	end
	if (
		( D_mdout_bus_expected_prev[12] !== 1'bx ) && ( D_mdout_bus_prev[12] !== D_mdout_bus_expected_prev[12] )
		&& ((D_mdout_bus_expected_prev[12] !== last_D_mdout_bus_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mdout_bus_exp[12] = D_mdout_bus_expected_prev[12];
	end
	if (
		( D_mdout_bus_expected_prev[13] !== 1'bx ) && ( D_mdout_bus_prev[13] !== D_mdout_bus_expected_prev[13] )
		&& ((D_mdout_bus_expected_prev[13] !== last_D_mdout_bus_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mdout_bus_exp[13] = D_mdout_bus_expected_prev[13];
	end
	if (
		( D_mdout_bus_expected_prev[14] !== 1'bx ) && ( D_mdout_bus_prev[14] !== D_mdout_bus_expected_prev[14] )
		&& ((D_mdout_bus_expected_prev[14] !== last_D_mdout_bus_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mdout_bus_exp[14] = D_mdout_bus_expected_prev[14];
	end
	if (
		( D_mdout_bus_expected_prev[15] !== 1'bx ) && ( D_mdout_bus_prev[15] !== D_mdout_bus_expected_prev[15] )
		&& ((D_mdout_bus_expected_prev[15] !== last_D_mdout_bus_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mdout_bus[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mdout_bus_expected_prev);
		$display ("     Real value = %b", D_mdout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D_mdout_bus_exp[15] = D_mdout_bus_expected_prev[15];
	end
	if (
		( D_mem_addr_expected_prev[0] !== 1'bx ) && ( D_mem_addr_prev[0] !== D_mem_addr_expected_prev[0] )
		&& ((D_mem_addr_expected_prev[0] !== last_D_mem_addr_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D_mem_addr_exp[0] = D_mem_addr_expected_prev[0];
	end
	if (
		( D_mem_addr_expected_prev[1] !== 1'bx ) && ( D_mem_addr_prev[1] !== D_mem_addr_expected_prev[1] )
		&& ((D_mem_addr_expected_prev[1] !== last_D_mem_addr_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D_mem_addr_exp[1] = D_mem_addr_expected_prev[1];
	end
	if (
		( D_mem_addr_expected_prev[2] !== 1'bx ) && ( D_mem_addr_prev[2] !== D_mem_addr_expected_prev[2] )
		&& ((D_mem_addr_expected_prev[2] !== last_D_mem_addr_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D_mem_addr_exp[2] = D_mem_addr_expected_prev[2];
	end
	if (
		( D_mem_addr_expected_prev[3] !== 1'bx ) && ( D_mem_addr_prev[3] !== D_mem_addr_expected_prev[3] )
		&& ((D_mem_addr_expected_prev[3] !== last_D_mem_addr_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D_mem_addr_exp[3] = D_mem_addr_expected_prev[3];
	end
	if (
		( D_mem_addr_expected_prev[4] !== 1'bx ) && ( D_mem_addr_prev[4] !== D_mem_addr_expected_prev[4] )
		&& ((D_mem_addr_expected_prev[4] !== last_D_mem_addr_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D_mem_addr_exp[4] = D_mem_addr_expected_prev[4];
	end
	if (
		( D_mem_addr_expected_prev[5] !== 1'bx ) && ( D_mem_addr_prev[5] !== D_mem_addr_expected_prev[5] )
		&& ((D_mem_addr_expected_prev[5] !== last_D_mem_addr_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D_mem_addr_exp[5] = D_mem_addr_expected_prev[5];
	end
	if (
		( D_mem_addr_expected_prev[6] !== 1'bx ) && ( D_mem_addr_prev[6] !== D_mem_addr_expected_prev[6] )
		&& ((D_mem_addr_expected_prev[6] !== last_D_mem_addr_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D_mem_addr_exp[6] = D_mem_addr_expected_prev[6];
	end
	if (
		( D_mem_addr_expected_prev[7] !== 1'bx ) && ( D_mem_addr_prev[7] !== D_mem_addr_expected_prev[7] )
		&& ((D_mem_addr_expected_prev[7] !== last_D_mem_addr_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D_mem_addr_exp[7] = D_mem_addr_expected_prev[7];
	end
	if (
		( D_mem_addr_expected_prev[8] !== 1'bx ) && ( D_mem_addr_prev[8] !== D_mem_addr_expected_prev[8] )
		&& ((D_mem_addr_expected_prev[8] !== last_D_mem_addr_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D_mem_addr_exp[8] = D_mem_addr_expected_prev[8];
	end
	if (
		( D_mem_addr_expected_prev[9] !== 1'bx ) && ( D_mem_addr_prev[9] !== D_mem_addr_expected_prev[9] )
		&& ((D_mem_addr_expected_prev[9] !== last_D_mem_addr_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D_mem_addr_exp[9] = D_mem_addr_expected_prev[9];
	end
	if (
		( D_mem_addr_expected_prev[10] !== 1'bx ) && ( D_mem_addr_prev[10] !== D_mem_addr_expected_prev[10] )
		&& ((D_mem_addr_expected_prev[10] !== last_D_mem_addr_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D_mem_addr_exp[10] = D_mem_addr_expected_prev[10];
	end
	if (
		( D_mem_addr_expected_prev[11] !== 1'bx ) && ( D_mem_addr_prev[11] !== D_mem_addr_expected_prev[11] )
		&& ((D_mem_addr_expected_prev[11] !== last_D_mem_addr_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_mem_addr[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_mem_addr_expected_prev);
		$display ("     Real value = %b", D_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D_mem_addr_exp[11] = D_mem_addr_expected_prev[11];
	end
	if (
		( D_Mre_expected_prev !== 1'bx ) && ( D_Mre_prev !== D_Mre_expected_prev )
		&& ((D_Mre_expected_prev !== last_D_Mre_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_Mre :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_Mre_expected_prev);
		$display ("     Real value = %b", D_Mre_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_D_Mre_exp = D_Mre_expected_prev;
	end
	if (
		( D_Mwe_expected_prev !== 1'bx ) && ( D_Mwe_prev !== D_Mwe_expected_prev )
		&& ((D_Mwe_expected_prev !== last_D_Mwe_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_Mwe :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_Mwe_expected_prev);
		$display ("     Real value = %b", D_Mwe_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D_Mwe_exp = D_Mwe_expected_prev;
	end
	if (
		( D_PCld_expected_prev !== 1'bx ) && ( D_PCld_prev !== D_PCld_expected_prev )
		&& ((D_PCld_expected_prev !== last_D_PCld_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_PCld :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_PCld_expected_prev);
		$display ("     Real value = %b", D_PCld_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D_PCld_exp = D_PCld_expected_prev;
	end
	if (
		( D_rfout_bus_expected_prev[0] !== 1'bx ) && ( D_rfout_bus_prev[0] !== D_rfout_bus_expected_prev[0] )
		&& ((D_rfout_bus_expected_prev[0] !== last_D_rfout_bus_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D_rfout_bus_exp[0] = D_rfout_bus_expected_prev[0];
	end
	if (
		( D_rfout_bus_expected_prev[1] !== 1'bx ) && ( D_rfout_bus_prev[1] !== D_rfout_bus_expected_prev[1] )
		&& ((D_rfout_bus_expected_prev[1] !== last_D_rfout_bus_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D_rfout_bus_exp[1] = D_rfout_bus_expected_prev[1];
	end
	if (
		( D_rfout_bus_expected_prev[2] !== 1'bx ) && ( D_rfout_bus_prev[2] !== D_rfout_bus_expected_prev[2] )
		&& ((D_rfout_bus_expected_prev[2] !== last_D_rfout_bus_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D_rfout_bus_exp[2] = D_rfout_bus_expected_prev[2];
	end
	if (
		( D_rfout_bus_expected_prev[3] !== 1'bx ) && ( D_rfout_bus_prev[3] !== D_rfout_bus_expected_prev[3] )
		&& ((D_rfout_bus_expected_prev[3] !== last_D_rfout_bus_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D_rfout_bus_exp[3] = D_rfout_bus_expected_prev[3];
	end
	if (
		( D_rfout_bus_expected_prev[4] !== 1'bx ) && ( D_rfout_bus_prev[4] !== D_rfout_bus_expected_prev[4] )
		&& ((D_rfout_bus_expected_prev[4] !== last_D_rfout_bus_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D_rfout_bus_exp[4] = D_rfout_bus_expected_prev[4];
	end
	if (
		( D_rfout_bus_expected_prev[5] !== 1'bx ) && ( D_rfout_bus_prev[5] !== D_rfout_bus_expected_prev[5] )
		&& ((D_rfout_bus_expected_prev[5] !== last_D_rfout_bus_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D_rfout_bus_exp[5] = D_rfout_bus_expected_prev[5];
	end
	if (
		( D_rfout_bus_expected_prev[6] !== 1'bx ) && ( D_rfout_bus_prev[6] !== D_rfout_bus_expected_prev[6] )
		&& ((D_rfout_bus_expected_prev[6] !== last_D_rfout_bus_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D_rfout_bus_exp[6] = D_rfout_bus_expected_prev[6];
	end
	if (
		( D_rfout_bus_expected_prev[7] !== 1'bx ) && ( D_rfout_bus_prev[7] !== D_rfout_bus_expected_prev[7] )
		&& ((D_rfout_bus_expected_prev[7] !== last_D_rfout_bus_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D_rfout_bus_exp[7] = D_rfout_bus_expected_prev[7];
	end
	if (
		( D_rfout_bus_expected_prev[8] !== 1'bx ) && ( D_rfout_bus_prev[8] !== D_rfout_bus_expected_prev[8] )
		&& ((D_rfout_bus_expected_prev[8] !== last_D_rfout_bus_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D_rfout_bus_exp[8] = D_rfout_bus_expected_prev[8];
	end
	if (
		( D_rfout_bus_expected_prev[9] !== 1'bx ) && ( D_rfout_bus_prev[9] !== D_rfout_bus_expected_prev[9] )
		&& ((D_rfout_bus_expected_prev[9] !== last_D_rfout_bus_exp[9]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D_rfout_bus_exp[9] = D_rfout_bus_expected_prev[9];
	end
	if (
		( D_rfout_bus_expected_prev[10] !== 1'bx ) && ( D_rfout_bus_prev[10] !== D_rfout_bus_expected_prev[10] )
		&& ((D_rfout_bus_expected_prev[10] !== last_D_rfout_bus_exp[10]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D_rfout_bus_exp[10] = D_rfout_bus_expected_prev[10];
	end
	if (
		( D_rfout_bus_expected_prev[11] !== 1'bx ) && ( D_rfout_bus_prev[11] !== D_rfout_bus_expected_prev[11] )
		&& ((D_rfout_bus_expected_prev[11] !== last_D_rfout_bus_exp[11]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D_rfout_bus_exp[11] = D_rfout_bus_expected_prev[11];
	end
	if (
		( D_rfout_bus_expected_prev[12] !== 1'bx ) && ( D_rfout_bus_prev[12] !== D_rfout_bus_expected_prev[12] )
		&& ((D_rfout_bus_expected_prev[12] !== last_D_rfout_bus_exp[12]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D_rfout_bus_exp[12] = D_rfout_bus_expected_prev[12];
	end
	if (
		( D_rfout_bus_expected_prev[13] !== 1'bx ) && ( D_rfout_bus_prev[13] !== D_rfout_bus_expected_prev[13] )
		&& ((D_rfout_bus_expected_prev[13] !== last_D_rfout_bus_exp[13]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D_rfout_bus_exp[13] = D_rfout_bus_expected_prev[13];
	end
	if (
		( D_rfout_bus_expected_prev[14] !== 1'bx ) && ( D_rfout_bus_prev[14] !== D_rfout_bus_expected_prev[14] )
		&& ((D_rfout_bus_expected_prev[14] !== last_D_rfout_bus_exp[14]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D_rfout_bus_exp[14] = D_rfout_bus_expected_prev[14];
	end
	if (
		( D_rfout_bus_expected_prev[15] !== 1'bx ) && ( D_rfout_bus_prev[15] !== D_rfout_bus_expected_prev[15] )
		&& ((D_rfout_bus_expected_prev[15] !== last_D_rfout_bus_exp[15]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rfout_bus[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rfout_bus_expected_prev);
		$display ("     Real value = %b", D_rfout_bus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D_rfout_bus_exp[15] = D_rfout_bus_expected_prev[15];
	end
	if (
		( D_RFr1a_expected_prev[0] !== 1'bx ) && ( D_RFr1a_prev[0] !== D_RFr1a_expected_prev[0] )
		&& ((D_RFr1a_expected_prev[0] !== last_D_RFr1a_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFr1a[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFr1a_expected_prev);
		$display ("     Real value = %b", D_RFr1a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_D_RFr1a_exp[0] = D_RFr1a_expected_prev[0];
	end
	if (
		( D_RFr1a_expected_prev[1] !== 1'bx ) && ( D_RFr1a_prev[1] !== D_RFr1a_expected_prev[1] )
		&& ((D_RFr1a_expected_prev[1] !== last_D_RFr1a_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFr1a[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFr1a_expected_prev);
		$display ("     Real value = %b", D_RFr1a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_D_RFr1a_exp[1] = D_RFr1a_expected_prev[1];
	end
	if (
		( D_RFr1a_expected_prev[2] !== 1'bx ) && ( D_RFr1a_prev[2] !== D_RFr1a_expected_prev[2] )
		&& ((D_RFr1a_expected_prev[2] !== last_D_RFr1a_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFr1a[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFr1a_expected_prev);
		$display ("     Real value = %b", D_RFr1a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_D_RFr1a_exp[2] = D_RFr1a_expected_prev[2];
	end
	if (
		( D_RFr1a_expected_prev[3] !== 1'bx ) && ( D_RFr1a_prev[3] !== D_RFr1a_expected_prev[3] )
		&& ((D_RFr1a_expected_prev[3] !== last_D_RFr1a_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFr1a[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFr1a_expected_prev);
		$display ("     Real value = %b", D_RFr1a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_D_RFr1a_exp[3] = D_RFr1a_expected_prev[3];
	end
	if (
		( D_RFr1e_expected_prev !== 1'bx ) && ( D_RFr1e_prev !== D_RFr1e_expected_prev )
		&& ((D_RFr1e_expected_prev !== last_D_RFr1e_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFr1e :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFr1e_expected_prev);
		$display ("     Real value = %b", D_RFr1e_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_D_RFr1e_exp = D_RFr1e_expected_prev;
	end
	if (
		( D_RFr2a_expected_prev[0] !== 1'bx ) && ( D_RFr2a_prev[0] !== D_RFr2a_expected_prev[0] )
		&& ((D_RFr2a_expected_prev[0] !== last_D_RFr2a_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFr2a[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFr2a_expected_prev);
		$display ("     Real value = %b", D_RFr2a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_D_RFr2a_exp[0] = D_RFr2a_expected_prev[0];
	end
	if (
		( D_RFr2a_expected_prev[1] !== 1'bx ) && ( D_RFr2a_prev[1] !== D_RFr2a_expected_prev[1] )
		&& ((D_RFr2a_expected_prev[1] !== last_D_RFr2a_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFr2a[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFr2a_expected_prev);
		$display ("     Real value = %b", D_RFr2a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_D_RFr2a_exp[1] = D_RFr2a_expected_prev[1];
	end
	if (
		( D_RFr2a_expected_prev[2] !== 1'bx ) && ( D_RFr2a_prev[2] !== D_RFr2a_expected_prev[2] )
		&& ((D_RFr2a_expected_prev[2] !== last_D_RFr2a_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFr2a[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFr2a_expected_prev);
		$display ("     Real value = %b", D_RFr2a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_D_RFr2a_exp[2] = D_RFr2a_expected_prev[2];
	end
	if (
		( D_RFr2a_expected_prev[3] !== 1'bx ) && ( D_RFr2a_prev[3] !== D_RFr2a_expected_prev[3] )
		&& ((D_RFr2a_expected_prev[3] !== last_D_RFr2a_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFr2a[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFr2a_expected_prev);
		$display ("     Real value = %b", D_RFr2a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_D_RFr2a_exp[3] = D_RFr2a_expected_prev[3];
	end
	if (
		( D_RFr2e_expected_prev !== 1'bx ) && ( D_RFr2e_prev !== D_RFr2e_expected_prev )
		&& ((D_RFr2e_expected_prev !== last_D_RFr2e_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFr2e :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFr2e_expected_prev);
		$display ("     Real value = %b", D_RFr2e_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_D_RFr2e_exp = D_RFr2e_expected_prev;
	end
	if (
		( D_RFs_expected_prev[0] !== 1'bx ) && ( D_RFs_prev[0] !== D_RFs_expected_prev[0] )
		&& ((D_RFs_expected_prev[0] !== last_D_RFs_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFs_expected_prev);
		$display ("     Real value = %b", D_RFs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_D_RFs_exp[0] = D_RFs_expected_prev[0];
	end
	if (
		( D_RFs_expected_prev[1] !== 1'bx ) && ( D_RFs_prev[1] !== D_RFs_expected_prev[1] )
		&& ((D_RFs_expected_prev[1] !== last_D_RFs_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFs_expected_prev);
		$display ("     Real value = %b", D_RFs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_D_RFs_exp[1] = D_RFs_expected_prev[1];
	end
	if (
		( D_RFwa_expected_prev[0] !== 1'bx ) && ( D_RFwa_prev[0] !== D_RFwa_expected_prev[0] )
		&& ((D_RFwa_expected_prev[0] !== last_D_RFwa_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFwa[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFwa_expected_prev);
		$display ("     Real value = %b", D_RFwa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_D_RFwa_exp[0] = D_RFwa_expected_prev[0];
	end
	if (
		( D_RFwa_expected_prev[1] !== 1'bx ) && ( D_RFwa_prev[1] !== D_RFwa_expected_prev[1] )
		&& ((D_RFwa_expected_prev[1] !== last_D_RFwa_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFwa[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFwa_expected_prev);
		$display ("     Real value = %b", D_RFwa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_D_RFwa_exp[1] = D_RFwa_expected_prev[1];
	end
	if (
		( D_RFwa_expected_prev[2] !== 1'bx ) && ( D_RFwa_prev[2] !== D_RFwa_expected_prev[2] )
		&& ((D_RFwa_expected_prev[2] !== last_D_RFwa_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFwa[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFwa_expected_prev);
		$display ("     Real value = %b", D_RFwa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_D_RFwa_exp[2] = D_RFwa_expected_prev[2];
	end
	if (
		( D_RFwa_expected_prev[3] !== 1'bx ) && ( D_RFwa_prev[3] !== D_RFwa_expected_prev[3] )
		&& ((D_RFwa_expected_prev[3] !== last_D_RFwa_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFwa[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFwa_expected_prev);
		$display ("     Real value = %b", D_RFwa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_D_RFwa_exp[3] = D_RFwa_expected_prev[3];
	end
	if (
		( D_RFwe_expected_prev !== 1'bx ) && ( D_RFwe_prev !== D_RFwe_expected_prev )
		&& ((D_RFwe_expected_prev !== last_D_RFwe_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_RFwe :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_RFwe_expected_prev);
		$display ("     Real value = %b", D_RFwe_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_D_RFwe_exp = D_RFwe_expected_prev;
	end
	if (
		( done_write_back_d_expected_prev !== 1'bx ) && ( done_write_back_d_prev !== done_write_back_d_expected_prev )
		&& ((done_write_back_d_expected_prev !== last_done_write_back_d_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done_write_back_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done_write_back_d_expected_prev);
		$display ("     Real value = %b", done_write_back_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_done_write_back_d_exp = done_write_back_d_expected_prev;
	end
	if (
		( lineIndex_d_expected_prev[0] !== 1'bx ) && ( lineIndex_d_prev[0] !== lineIndex_d_expected_prev[0] )
		&& ((lineIndex_d_expected_prev[0] !== last_lineIndex_d_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lineIndex_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lineIndex_d_expected_prev);
		$display ("     Real value = %b", lineIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_lineIndex_d_exp[0] = lineIndex_d_expected_prev[0];
	end
	if (
		( lineIndex_d_expected_prev[1] !== 1'bx ) && ( lineIndex_d_prev[1] !== lineIndex_d_expected_prev[1] )
		&& ((lineIndex_d_expected_prev[1] !== last_lineIndex_d_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lineIndex_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lineIndex_d_expected_prev);
		$display ("     Real value = %b", lineIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_lineIndex_d_exp[1] = lineIndex_d_expected_prev[1];
	end
	if (
		( lineIndex_d_expected_prev[2] !== 1'bx ) && ( lineIndex_d_prev[2] !== lineIndex_d_expected_prev[2] )
		&& ((lineIndex_d_expected_prev[2] !== last_lineIndex_d_exp[2]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lineIndex_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lineIndex_d_expected_prev);
		$display ("     Real value = %b", lineIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_lineIndex_d_exp[2] = lineIndex_d_expected_prev[2];
	end
	if (
		( reg_in_data_expected_prev[0] !== 1'bx ) && ( reg_in_data_prev[0] !== reg_in_data_expected_prev[0] )
		&& ((reg_in_data_expected_prev[0] !== last_reg_in_data_exp[0]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_in_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_in_data_expected_prev);
		$display ("     Real value = %b", reg_in_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_reg_in_data_exp[0] = reg_in_data_expected_prev[0];
	end
	if (
		( reg_in_data_expected_prev[1] !== 1'bx ) && ( reg_in_data_prev[1] !== reg_in_data_expected_prev[1] )
		&& ((reg_in_data_expected_prev[1] !== last_reg_in_data_exp[1]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_in_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_in_data_expected_prev);
		$display ("     Real value = %b", reg_in_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_reg_in_data_exp[1] = reg_in_data_expected_prev[1];
	end
	if (
		( reg_in_data_expected_prev[2] !== 1'bx ) && ( reg_in_data_prev[2] !== reg_in_data_expected_prev[2] )
		&& ((reg_in_data_expected_prev[2] !== last_reg_in_data_exp[2]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_in_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_in_data_expected_prev);
		$display ("     Real value = %b", reg_in_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_reg_in_data_exp[2] = reg_in_data_expected_prev[2];
	end
	if (
		( reg_in_data_expected_prev[3] !== 1'bx ) && ( reg_in_data_prev[3] !== reg_in_data_expected_prev[3] )
		&& ((reg_in_data_expected_prev[3] !== last_reg_in_data_exp[3]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_in_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_in_data_expected_prev);
		$display ("     Real value = %b", reg_in_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_reg_in_data_exp[3] = reg_in_data_expected_prev[3];
	end
	if (
		( reg_in_data_expected_prev[4] !== 1'bx ) && ( reg_in_data_prev[4] !== reg_in_data_expected_prev[4] )
		&& ((reg_in_data_expected_prev[4] !== last_reg_in_data_exp[4]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_in_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_in_data_expected_prev);
		$display ("     Real value = %b", reg_in_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_reg_in_data_exp[4] = reg_in_data_expected_prev[4];
	end
	if (
		( reg_in_data_expected_prev[5] !== 1'bx ) && ( reg_in_data_prev[5] !== reg_in_data_expected_prev[5] )
		&& ((reg_in_data_expected_prev[5] !== last_reg_in_data_exp[5]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_in_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_in_data_expected_prev);
		$display ("     Real value = %b", reg_in_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_reg_in_data_exp[5] = reg_in_data_expected_prev[5];
	end
	if (
		( reg_in_data_expected_prev[6] !== 1'bx ) && ( reg_in_data_prev[6] !== reg_in_data_expected_prev[6] )
		&& ((reg_in_data_expected_prev[6] !== last_reg_in_data_exp[6]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_in_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_in_data_expected_prev);
		$display ("     Real value = %b", reg_in_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_reg_in_data_exp[6] = reg_in_data_expected_prev[6];
	end
	if (
		( reg_in_data_expected_prev[7] !== 1'bx ) && ( reg_in_data_prev[7] !== reg_in_data_expected_prev[7] )
		&& ((reg_in_data_expected_prev[7] !== last_reg_in_data_exp[7]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_in_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_in_data_expected_prev);
		$display ("     Real value = %b", reg_in_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_reg_in_data_exp[7] = reg_in_data_expected_prev[7];
	end
	if (
		( reg_in_data_expected_prev[8] !== 1'bx ) && ( reg_in_data_prev[8] !== reg_in_data_expected_prev[8] )
		&& ((reg_in_data_expected_prev[8] !== last_reg_in_data_exp[8]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_in_data[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_in_data_expected_prev);
		$display ("     Real value = %b", reg_in_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_reg_in_data_exp[8] = reg_in_data_expected_prev[8];
	end
	if (
		( reg_in_data_expected_prev[9] !== 1'bx ) && ( reg_in_data_prev[9] !== reg_in_data_expected_prev[9] )
		&& ((reg_in_data_expected_prev[9] !== last_reg_in_data_exp[9]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_in_data[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_in_data_expected_prev);
		$display ("     Real value = %b", reg_in_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_reg_in_data_exp[9] = reg_in_data_expected_prev[9];
	end
	if (
		( reg_in_data_expected_prev[10] !== 1'bx ) && ( reg_in_data_prev[10] !== reg_in_data_expected_prev[10] )
		&& ((reg_in_data_expected_prev[10] !== last_reg_in_data_exp[10]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_in_data[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_in_data_expected_prev);
		$display ("     Real value = %b", reg_in_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_reg_in_data_exp[10] = reg_in_data_expected_prev[10];
	end
	if (
		( reg_in_data_expected_prev[11] !== 1'bx ) && ( reg_in_data_prev[11] !== reg_in_data_expected_prev[11] )
		&& ((reg_in_data_expected_prev[11] !== last_reg_in_data_exp[11]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_in_data[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_in_data_expected_prev);
		$display ("     Real value = %b", reg_in_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_reg_in_data_exp[11] = reg_in_data_expected_prev[11];
	end
	if (
		( reg_in_data_expected_prev[12] !== 1'bx ) && ( reg_in_data_prev[12] !== reg_in_data_expected_prev[12] )
		&& ((reg_in_data_expected_prev[12] !== last_reg_in_data_exp[12]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_in_data[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_in_data_expected_prev);
		$display ("     Real value = %b", reg_in_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_reg_in_data_exp[12] = reg_in_data_expected_prev[12];
	end
	if (
		( reg_in_data_expected_prev[13] !== 1'bx ) && ( reg_in_data_prev[13] !== reg_in_data_expected_prev[13] )
		&& ((reg_in_data_expected_prev[13] !== last_reg_in_data_exp[13]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_in_data[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_in_data_expected_prev);
		$display ("     Real value = %b", reg_in_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_reg_in_data_exp[13] = reg_in_data_expected_prev[13];
	end
	if (
		( reg_in_data_expected_prev[14] !== 1'bx ) && ( reg_in_data_prev[14] !== reg_in_data_expected_prev[14] )
		&& ((reg_in_data_expected_prev[14] !== last_reg_in_data_exp[14]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_in_data[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_in_data_expected_prev);
		$display ("     Real value = %b", reg_in_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_reg_in_data_exp[14] = reg_in_data_expected_prev[14];
	end
	if (
		( reg_in_data_expected_prev[15] !== 1'bx ) && ( reg_in_data_prev[15] !== reg_in_data_expected_prev[15] )
		&& ((reg_in_data_expected_prev[15] !== last_reg_in_data_exp[15]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_in_data[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_in_data_expected_prev);
		$display ("     Real value = %b", reg_in_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_reg_in_data_exp[15] = reg_in_data_expected_prev[15];
	end
	if (
		( reg_out_data_1_expected_prev[0] !== 1'bx ) && ( reg_out_data_1_prev[0] !== reg_out_data_1_expected_prev[0] )
		&& ((reg_out_data_1_expected_prev[0] !== last_reg_out_data_1_exp[0]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_1_expected_prev);
		$display ("     Real value = %b", reg_out_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_reg_out_data_1_exp[0] = reg_out_data_1_expected_prev[0];
	end
	if (
		( reg_out_data_1_expected_prev[1] !== 1'bx ) && ( reg_out_data_1_prev[1] !== reg_out_data_1_expected_prev[1] )
		&& ((reg_out_data_1_expected_prev[1] !== last_reg_out_data_1_exp[1]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_1_expected_prev);
		$display ("     Real value = %b", reg_out_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_reg_out_data_1_exp[1] = reg_out_data_1_expected_prev[1];
	end
	if (
		( reg_out_data_1_expected_prev[2] !== 1'bx ) && ( reg_out_data_1_prev[2] !== reg_out_data_1_expected_prev[2] )
		&& ((reg_out_data_1_expected_prev[2] !== last_reg_out_data_1_exp[2]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_1_expected_prev);
		$display ("     Real value = %b", reg_out_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_reg_out_data_1_exp[2] = reg_out_data_1_expected_prev[2];
	end
	if (
		( reg_out_data_1_expected_prev[3] !== 1'bx ) && ( reg_out_data_1_prev[3] !== reg_out_data_1_expected_prev[3] )
		&& ((reg_out_data_1_expected_prev[3] !== last_reg_out_data_1_exp[3]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_1_expected_prev);
		$display ("     Real value = %b", reg_out_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_reg_out_data_1_exp[3] = reg_out_data_1_expected_prev[3];
	end
	if (
		( reg_out_data_1_expected_prev[4] !== 1'bx ) && ( reg_out_data_1_prev[4] !== reg_out_data_1_expected_prev[4] )
		&& ((reg_out_data_1_expected_prev[4] !== last_reg_out_data_1_exp[4]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_1_expected_prev);
		$display ("     Real value = %b", reg_out_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_reg_out_data_1_exp[4] = reg_out_data_1_expected_prev[4];
	end
	if (
		( reg_out_data_1_expected_prev[5] !== 1'bx ) && ( reg_out_data_1_prev[5] !== reg_out_data_1_expected_prev[5] )
		&& ((reg_out_data_1_expected_prev[5] !== last_reg_out_data_1_exp[5]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_1_expected_prev);
		$display ("     Real value = %b", reg_out_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_reg_out_data_1_exp[5] = reg_out_data_1_expected_prev[5];
	end
	if (
		( reg_out_data_1_expected_prev[6] !== 1'bx ) && ( reg_out_data_1_prev[6] !== reg_out_data_1_expected_prev[6] )
		&& ((reg_out_data_1_expected_prev[6] !== last_reg_out_data_1_exp[6]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_1_expected_prev);
		$display ("     Real value = %b", reg_out_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_reg_out_data_1_exp[6] = reg_out_data_1_expected_prev[6];
	end
	if (
		( reg_out_data_1_expected_prev[7] !== 1'bx ) && ( reg_out_data_1_prev[7] !== reg_out_data_1_expected_prev[7] )
		&& ((reg_out_data_1_expected_prev[7] !== last_reg_out_data_1_exp[7]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_1_expected_prev);
		$display ("     Real value = %b", reg_out_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_reg_out_data_1_exp[7] = reg_out_data_1_expected_prev[7];
	end
	if (
		( reg_out_data_1_expected_prev[8] !== 1'bx ) && ( reg_out_data_1_prev[8] !== reg_out_data_1_expected_prev[8] )
		&& ((reg_out_data_1_expected_prev[8] !== last_reg_out_data_1_exp[8]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_1_expected_prev);
		$display ("     Real value = %b", reg_out_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_reg_out_data_1_exp[8] = reg_out_data_1_expected_prev[8];
	end
	if (
		( reg_out_data_1_expected_prev[9] !== 1'bx ) && ( reg_out_data_1_prev[9] !== reg_out_data_1_expected_prev[9] )
		&& ((reg_out_data_1_expected_prev[9] !== last_reg_out_data_1_exp[9]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_1_expected_prev);
		$display ("     Real value = %b", reg_out_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_reg_out_data_1_exp[9] = reg_out_data_1_expected_prev[9];
	end
	if (
		( reg_out_data_1_expected_prev[10] !== 1'bx ) && ( reg_out_data_1_prev[10] !== reg_out_data_1_expected_prev[10] )
		&& ((reg_out_data_1_expected_prev[10] !== last_reg_out_data_1_exp[10]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_1_expected_prev);
		$display ("     Real value = %b", reg_out_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_reg_out_data_1_exp[10] = reg_out_data_1_expected_prev[10];
	end
	if (
		( reg_out_data_1_expected_prev[11] !== 1'bx ) && ( reg_out_data_1_prev[11] !== reg_out_data_1_expected_prev[11] )
		&& ((reg_out_data_1_expected_prev[11] !== last_reg_out_data_1_exp[11]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_1_expected_prev);
		$display ("     Real value = %b", reg_out_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_reg_out_data_1_exp[11] = reg_out_data_1_expected_prev[11];
	end
	if (
		( reg_out_data_1_expected_prev[12] !== 1'bx ) && ( reg_out_data_1_prev[12] !== reg_out_data_1_expected_prev[12] )
		&& ((reg_out_data_1_expected_prev[12] !== last_reg_out_data_1_exp[12]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_1_expected_prev);
		$display ("     Real value = %b", reg_out_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_reg_out_data_1_exp[12] = reg_out_data_1_expected_prev[12];
	end
	if (
		( reg_out_data_1_expected_prev[13] !== 1'bx ) && ( reg_out_data_1_prev[13] !== reg_out_data_1_expected_prev[13] )
		&& ((reg_out_data_1_expected_prev[13] !== last_reg_out_data_1_exp[13]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_1_expected_prev);
		$display ("     Real value = %b", reg_out_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_reg_out_data_1_exp[13] = reg_out_data_1_expected_prev[13];
	end
	if (
		( reg_out_data_1_expected_prev[14] !== 1'bx ) && ( reg_out_data_1_prev[14] !== reg_out_data_1_expected_prev[14] )
		&& ((reg_out_data_1_expected_prev[14] !== last_reg_out_data_1_exp[14]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_1_expected_prev);
		$display ("     Real value = %b", reg_out_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_reg_out_data_1_exp[14] = reg_out_data_1_expected_prev[14];
	end
	if (
		( reg_out_data_1_expected_prev[15] !== 1'bx ) && ( reg_out_data_1_prev[15] !== reg_out_data_1_expected_prev[15] )
		&& ((reg_out_data_1_expected_prev[15] !== last_reg_out_data_1_exp[15]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_1_expected_prev);
		$display ("     Real value = %b", reg_out_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_reg_out_data_1_exp[15] = reg_out_data_1_expected_prev[15];
	end
	if (
		( reg_out_data_2_expected_prev[0] !== 1'bx ) && ( reg_out_data_2_prev[0] !== reg_out_data_2_expected_prev[0] )
		&& ((reg_out_data_2_expected_prev[0] !== last_reg_out_data_2_exp[0]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_2_expected_prev);
		$display ("     Real value = %b", reg_out_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_reg_out_data_2_exp[0] = reg_out_data_2_expected_prev[0];
	end
	if (
		( reg_out_data_2_expected_prev[1] !== 1'bx ) && ( reg_out_data_2_prev[1] !== reg_out_data_2_expected_prev[1] )
		&& ((reg_out_data_2_expected_prev[1] !== last_reg_out_data_2_exp[1]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_2_expected_prev);
		$display ("     Real value = %b", reg_out_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_reg_out_data_2_exp[1] = reg_out_data_2_expected_prev[1];
	end
	if (
		( reg_out_data_2_expected_prev[2] !== 1'bx ) && ( reg_out_data_2_prev[2] !== reg_out_data_2_expected_prev[2] )
		&& ((reg_out_data_2_expected_prev[2] !== last_reg_out_data_2_exp[2]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_2_expected_prev);
		$display ("     Real value = %b", reg_out_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_reg_out_data_2_exp[2] = reg_out_data_2_expected_prev[2];
	end
	if (
		( reg_out_data_2_expected_prev[3] !== 1'bx ) && ( reg_out_data_2_prev[3] !== reg_out_data_2_expected_prev[3] )
		&& ((reg_out_data_2_expected_prev[3] !== last_reg_out_data_2_exp[3]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_2_expected_prev);
		$display ("     Real value = %b", reg_out_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_reg_out_data_2_exp[3] = reg_out_data_2_expected_prev[3];
	end
	if (
		( reg_out_data_2_expected_prev[4] !== 1'bx ) && ( reg_out_data_2_prev[4] !== reg_out_data_2_expected_prev[4] )
		&& ((reg_out_data_2_expected_prev[4] !== last_reg_out_data_2_exp[4]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_2_expected_prev);
		$display ("     Real value = %b", reg_out_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_reg_out_data_2_exp[4] = reg_out_data_2_expected_prev[4];
	end
	if (
		( reg_out_data_2_expected_prev[5] !== 1'bx ) && ( reg_out_data_2_prev[5] !== reg_out_data_2_expected_prev[5] )
		&& ((reg_out_data_2_expected_prev[5] !== last_reg_out_data_2_exp[5]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_2_expected_prev);
		$display ("     Real value = %b", reg_out_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_reg_out_data_2_exp[5] = reg_out_data_2_expected_prev[5];
	end
	if (
		( reg_out_data_2_expected_prev[6] !== 1'bx ) && ( reg_out_data_2_prev[6] !== reg_out_data_2_expected_prev[6] )
		&& ((reg_out_data_2_expected_prev[6] !== last_reg_out_data_2_exp[6]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_2_expected_prev);
		$display ("     Real value = %b", reg_out_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_reg_out_data_2_exp[6] = reg_out_data_2_expected_prev[6];
	end
	if (
		( reg_out_data_2_expected_prev[7] !== 1'bx ) && ( reg_out_data_2_prev[7] !== reg_out_data_2_expected_prev[7] )
		&& ((reg_out_data_2_expected_prev[7] !== last_reg_out_data_2_exp[7]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_2_expected_prev);
		$display ("     Real value = %b", reg_out_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_reg_out_data_2_exp[7] = reg_out_data_2_expected_prev[7];
	end
	if (
		( reg_out_data_2_expected_prev[8] !== 1'bx ) && ( reg_out_data_2_prev[8] !== reg_out_data_2_expected_prev[8] )
		&& ((reg_out_data_2_expected_prev[8] !== last_reg_out_data_2_exp[8]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_2_expected_prev);
		$display ("     Real value = %b", reg_out_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_reg_out_data_2_exp[8] = reg_out_data_2_expected_prev[8];
	end
	if (
		( reg_out_data_2_expected_prev[9] !== 1'bx ) && ( reg_out_data_2_prev[9] !== reg_out_data_2_expected_prev[9] )
		&& ((reg_out_data_2_expected_prev[9] !== last_reg_out_data_2_exp[9]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_2_expected_prev);
		$display ("     Real value = %b", reg_out_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_reg_out_data_2_exp[9] = reg_out_data_2_expected_prev[9];
	end
	if (
		( reg_out_data_2_expected_prev[10] !== 1'bx ) && ( reg_out_data_2_prev[10] !== reg_out_data_2_expected_prev[10] )
		&& ((reg_out_data_2_expected_prev[10] !== last_reg_out_data_2_exp[10]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_2_expected_prev);
		$display ("     Real value = %b", reg_out_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_reg_out_data_2_exp[10] = reg_out_data_2_expected_prev[10];
	end
	if (
		( reg_out_data_2_expected_prev[11] !== 1'bx ) && ( reg_out_data_2_prev[11] !== reg_out_data_2_expected_prev[11] )
		&& ((reg_out_data_2_expected_prev[11] !== last_reg_out_data_2_exp[11]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_2_expected_prev);
		$display ("     Real value = %b", reg_out_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_reg_out_data_2_exp[11] = reg_out_data_2_expected_prev[11];
	end
	if (
		( reg_out_data_2_expected_prev[12] !== 1'bx ) && ( reg_out_data_2_prev[12] !== reg_out_data_2_expected_prev[12] )
		&& ((reg_out_data_2_expected_prev[12] !== last_reg_out_data_2_exp[12]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_2_expected_prev);
		$display ("     Real value = %b", reg_out_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_reg_out_data_2_exp[12] = reg_out_data_2_expected_prev[12];
	end
	if (
		( reg_out_data_2_expected_prev[13] !== 1'bx ) && ( reg_out_data_2_prev[13] !== reg_out_data_2_expected_prev[13] )
		&& ((reg_out_data_2_expected_prev[13] !== last_reg_out_data_2_exp[13]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_2_expected_prev);
		$display ("     Real value = %b", reg_out_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_reg_out_data_2_exp[13] = reg_out_data_2_expected_prev[13];
	end
	if (
		( reg_out_data_2_expected_prev[14] !== 1'bx ) && ( reg_out_data_2_prev[14] !== reg_out_data_2_expected_prev[14] )
		&& ((reg_out_data_2_expected_prev[14] !== last_reg_out_data_2_exp[14]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_2_expected_prev);
		$display ("     Real value = %b", reg_out_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_reg_out_data_2_exp[14] = reg_out_data_2_expected_prev[14];
	end
	if (
		( reg_out_data_2_expected_prev[15] !== 1'bx ) && ( reg_out_data_2_prev[15] !== reg_out_data_2_expected_prev[15] )
		&& ((reg_out_data_2_expected_prev[15] !== last_reg_out_data_2_exp[15]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_out_data_2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_out_data_2_expected_prev);
		$display ("     Real value = %b", reg_out_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_reg_out_data_2_exp[15] = reg_out_data_2_expected_prev[15];
	end
	if (
		( state_cpu_expected_prev[0] !== 1'bx ) && ( state_cpu_prev[0] !== state_cpu_expected_prev[0] )
		&& ((state_cpu_expected_prev[0] !== last_state_cpu_exp[0]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_state_cpu_exp[0] = state_cpu_expected_prev[0];
	end
	if (
		( state_cpu_expected_prev[1] !== 1'bx ) && ( state_cpu_prev[1] !== state_cpu_expected_prev[1] )
		&& ((state_cpu_expected_prev[1] !== last_state_cpu_exp[1]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_state_cpu_exp[1] = state_cpu_expected_prev[1];
	end
	if (
		( state_cpu_expected_prev[2] !== 1'bx ) && ( state_cpu_prev[2] !== state_cpu_expected_prev[2] )
		&& ((state_cpu_expected_prev[2] !== last_state_cpu_exp[2]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_state_cpu_exp[2] = state_cpu_expected_prev[2];
	end
	if (
		( state_cpu_expected_prev[3] !== 1'bx ) && ( state_cpu_prev[3] !== state_cpu_expected_prev[3] )
		&& ((state_cpu_expected_prev[3] !== last_state_cpu_exp[3]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_state_cpu_exp[3] = state_cpu_expected_prev[3];
	end
	if (
		( state_cpu_expected_prev[4] !== 1'bx ) && ( state_cpu_prev[4] !== state_cpu_expected_prev[4] )
		&& ((state_cpu_expected_prev[4] !== last_state_cpu_exp[4]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_state_cpu_exp[4] = state_cpu_expected_prev[4];
	end
	if (
		( state_cpu_expected_prev[5] !== 1'bx ) && ( state_cpu_prev[5] !== state_cpu_expected_prev[5] )
		&& ((state_cpu_expected_prev[5] !== last_state_cpu_exp[5]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_state_cpu_exp[5] = state_cpu_expected_prev[5];
	end
	if (
		( state_cpu_expected_prev[6] !== 1'bx ) && ( state_cpu_prev[6] !== state_cpu_expected_prev[6] )
		&& ((state_cpu_expected_prev[6] !== last_state_cpu_exp[6]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_state_cpu_exp[6] = state_cpu_expected_prev[6];
	end
	if (
		( state_cpu_expected_prev[7] !== 1'bx ) && ( state_cpu_prev[7] !== state_cpu_expected_prev[7] )
		&& ((state_cpu_expected_prev[7] !== last_state_cpu_exp[7]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_state_cpu_exp[7] = state_cpu_expected_prev[7];
	end
	if (
		( state_cpu_expected_prev[8] !== 1'bx ) && ( state_cpu_prev[8] !== state_cpu_expected_prev[8] )
		&& ((state_cpu_expected_prev[8] !== last_state_cpu_exp[8]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_state_cpu_exp[8] = state_cpu_expected_prev[8];
	end
	if (
		( state_cpu_expected_prev[9] !== 1'bx ) && ( state_cpu_prev[9] !== state_cpu_expected_prev[9] )
		&& ((state_cpu_expected_prev[9] !== last_state_cpu_exp[9]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_state_cpu_exp[9] = state_cpu_expected_prev[9];
	end
	if (
		( state_cpu_expected_prev[10] !== 1'bx ) && ( state_cpu_prev[10] !== state_cpu_expected_prev[10] )
		&& ((state_cpu_expected_prev[10] !== last_state_cpu_exp[10]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_state_cpu_exp[10] = state_cpu_expected_prev[10];
	end
	if (
		( state_cpu_expected_prev[11] !== 1'bx ) && ( state_cpu_prev[11] !== state_cpu_expected_prev[11] )
		&& ((state_cpu_expected_prev[11] !== last_state_cpu_exp[11]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_cpu[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_cpu_expected_prev);
		$display ("     Real value = %b", state_cpu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_state_cpu_exp[11] = state_cpu_expected_prev[11];
	end
	if (
		( sys_output_expected_prev[0] !== 1'bx ) && ( sys_output_prev[0] !== sys_output_expected_prev[0] )
		&& ((sys_output_expected_prev[0] !== last_sys_output_exp[0]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_sys_output_exp[0] = sys_output_expected_prev[0];
	end
	if (
		( sys_output_expected_prev[1] !== 1'bx ) && ( sys_output_prev[1] !== sys_output_expected_prev[1] )
		&& ((sys_output_expected_prev[1] !== last_sys_output_exp[1]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_sys_output_exp[1] = sys_output_expected_prev[1];
	end
	if (
		( sys_output_expected_prev[2] !== 1'bx ) && ( sys_output_prev[2] !== sys_output_expected_prev[2] )
		&& ((sys_output_expected_prev[2] !== last_sys_output_exp[2]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_sys_output_exp[2] = sys_output_expected_prev[2];
	end
	if (
		( sys_output_expected_prev[3] !== 1'bx ) && ( sys_output_prev[3] !== sys_output_expected_prev[3] )
		&& ((sys_output_expected_prev[3] !== last_sys_output_exp[3]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_sys_output_exp[3] = sys_output_expected_prev[3];
	end
	if (
		( sys_output_expected_prev[4] !== 1'bx ) && ( sys_output_prev[4] !== sys_output_expected_prev[4] )
		&& ((sys_output_expected_prev[4] !== last_sys_output_exp[4]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_sys_output_exp[4] = sys_output_expected_prev[4];
	end
	if (
		( sys_output_expected_prev[5] !== 1'bx ) && ( sys_output_prev[5] !== sys_output_expected_prev[5] )
		&& ((sys_output_expected_prev[5] !== last_sys_output_exp[5]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_sys_output_exp[5] = sys_output_expected_prev[5];
	end
	if (
		( sys_output_expected_prev[6] !== 1'bx ) && ( sys_output_prev[6] !== sys_output_expected_prev[6] )
		&& ((sys_output_expected_prev[6] !== last_sys_output_exp[6]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_sys_output_exp[6] = sys_output_expected_prev[6];
	end
	if (
		( sys_output_expected_prev[7] !== 1'bx ) && ( sys_output_prev[7] !== sys_output_expected_prev[7] )
		&& ((sys_output_expected_prev[7] !== last_sys_output_exp[7]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_sys_output_exp[7] = sys_output_expected_prev[7];
	end
	if (
		( sys_output_expected_prev[8] !== 1'bx ) && ( sys_output_prev[8] !== sys_output_expected_prev[8] )
		&& ((sys_output_expected_prev[8] !== last_sys_output_exp[8]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_sys_output_exp[8] = sys_output_expected_prev[8];
	end
	if (
		( sys_output_expected_prev[9] !== 1'bx ) && ( sys_output_prev[9] !== sys_output_expected_prev[9] )
		&& ((sys_output_expected_prev[9] !== last_sys_output_exp[9]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_sys_output_exp[9] = sys_output_expected_prev[9];
	end
	if (
		( sys_output_expected_prev[10] !== 1'bx ) && ( sys_output_prev[10] !== sys_output_expected_prev[10] )
		&& ((sys_output_expected_prev[10] !== last_sys_output_exp[10]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_sys_output_exp[10] = sys_output_expected_prev[10];
	end
	if (
		( sys_output_expected_prev[11] !== 1'bx ) && ( sys_output_prev[11] !== sys_output_expected_prev[11] )
		&& ((sys_output_expected_prev[11] !== last_sys_output_exp[11]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_sys_output_exp[11] = sys_output_expected_prev[11];
	end
	if (
		( sys_output_expected_prev[12] !== 1'bx ) && ( sys_output_prev[12] !== sys_output_expected_prev[12] )
		&& ((sys_output_expected_prev[12] !== last_sys_output_exp[12]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_sys_output_exp[12] = sys_output_expected_prev[12];
	end
	if (
		( sys_output_expected_prev[13] !== 1'bx ) && ( sys_output_prev[13] !== sys_output_expected_prev[13] )
		&& ((sys_output_expected_prev[13] !== last_sys_output_exp[13]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_sys_output_exp[13] = sys_output_expected_prev[13];
	end
	if (
		( sys_output_expected_prev[14] !== 1'bx ) && ( sys_output_prev[14] !== sys_output_expected_prev[14] )
		&& ((sys_output_expected_prev[14] !== last_sys_output_exp[14]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_sys_output_exp[14] = sys_output_expected_prev[14];
	end
	if (
		( sys_output_expected_prev[15] !== 1'bx ) && ( sys_output_prev[15] !== sys_output_expected_prev[15] )
		&& ((sys_output_expected_prev[15] !== last_sys_output_exp[15]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sys_output[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sys_output_expected_prev);
		$display ("     Real value = %b", sys_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_sys_output_exp[15] = sys_output_expected_prev[15];
	end
	if (
		( tagIndex_d_expected_prev[0] !== 1'bx ) && ( tagIndex_d_prev[0] !== tagIndex_d_expected_prev[0] )
		&& ((tagIndex_d_expected_prev[0] !== last_tagIndex_d_exp[0]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tagIndex_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tagIndex_d_expected_prev);
		$display ("     Real value = %b", tagIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_tagIndex_d_exp[0] = tagIndex_d_expected_prev[0];
	end
	if (
		( tagIndex_d_expected_prev[1] !== 1'bx ) && ( tagIndex_d_prev[1] !== tagIndex_d_expected_prev[1] )
		&& ((tagIndex_d_expected_prev[1] !== last_tagIndex_d_exp[1]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tagIndex_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tagIndex_d_expected_prev);
		$display ("     Real value = %b", tagIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_tagIndex_d_exp[1] = tagIndex_d_expected_prev[1];
	end
	if (
		( tagIndex_d_expected_prev[2] !== 1'bx ) && ( tagIndex_d_prev[2] !== tagIndex_d_expected_prev[2] )
		&& ((tagIndex_d_expected_prev[2] !== last_tagIndex_d_exp[2]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tagIndex_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tagIndex_d_expected_prev);
		$display ("     Real value = %b", tagIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_tagIndex_d_exp[2] = tagIndex_d_expected_prev[2];
	end
	if (
		( tagIndex_d_expected_prev[3] !== 1'bx ) && ( tagIndex_d_prev[3] !== tagIndex_d_expected_prev[3] )
		&& ((tagIndex_d_expected_prev[3] !== last_tagIndex_d_exp[3]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tagIndex_d[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tagIndex_d_expected_prev);
		$display ("     Real value = %b", tagIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_tagIndex_d_exp[3] = tagIndex_d_expected_prev[3];
	end
	if (
		( tagIndex_d_expected_prev[4] !== 1'bx ) && ( tagIndex_d_prev[4] !== tagIndex_d_expected_prev[4] )
		&& ((tagIndex_d_expected_prev[4] !== last_tagIndex_d_exp[4]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tagIndex_d[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tagIndex_d_expected_prev);
		$display ("     Real value = %b", tagIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_tagIndex_d_exp[4] = tagIndex_d_expected_prev[4];
	end
	if (
		( tagIndex_d_expected_prev[5] !== 1'bx ) && ( tagIndex_d_prev[5] !== tagIndex_d_expected_prev[5] )
		&& ((tagIndex_d_expected_prev[5] !== last_tagIndex_d_exp[5]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tagIndex_d[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tagIndex_d_expected_prev);
		$display ("     Real value = %b", tagIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_tagIndex_d_exp[5] = tagIndex_d_expected_prev[5];
	end
	if (
		( tagIndex_d_expected_prev[6] !== 1'bx ) && ( tagIndex_d_prev[6] !== tagIndex_d_expected_prev[6] )
		&& ((tagIndex_d_expected_prev[6] !== last_tagIndex_d_exp[6]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tagIndex_d[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tagIndex_d_expected_prev);
		$display ("     Real value = %b", tagIndex_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_tagIndex_d_exp[6] = tagIndex_d_expected_prev[6];
	end
	if (
		( tempDataIn_d_expected_prev[0] !== 1'bx ) && ( tempDataIn_d_prev[0] !== tempDataIn_d_expected_prev[0] )
		&& ((tempDataIn_d_expected_prev[0] !== last_tempDataIn_d_exp[0]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_tempDataIn_d_exp[0] = tempDataIn_d_expected_prev[0];
	end
	if (
		( tempDataIn_d_expected_prev[1] !== 1'bx ) && ( tempDataIn_d_prev[1] !== tempDataIn_d_expected_prev[1] )
		&& ((tempDataIn_d_expected_prev[1] !== last_tempDataIn_d_exp[1]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_tempDataIn_d_exp[1] = tempDataIn_d_expected_prev[1];
	end
	if (
		( tempDataIn_d_expected_prev[2] !== 1'bx ) && ( tempDataIn_d_prev[2] !== tempDataIn_d_expected_prev[2] )
		&& ((tempDataIn_d_expected_prev[2] !== last_tempDataIn_d_exp[2]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_tempDataIn_d_exp[2] = tempDataIn_d_expected_prev[2];
	end
	if (
		( tempDataIn_d_expected_prev[3] !== 1'bx ) && ( tempDataIn_d_prev[3] !== tempDataIn_d_expected_prev[3] )
		&& ((tempDataIn_d_expected_prev[3] !== last_tempDataIn_d_exp[3]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_tempDataIn_d_exp[3] = tempDataIn_d_expected_prev[3];
	end
	if (
		( tempDataIn_d_expected_prev[4] !== 1'bx ) && ( tempDataIn_d_prev[4] !== tempDataIn_d_expected_prev[4] )
		&& ((tempDataIn_d_expected_prev[4] !== last_tempDataIn_d_exp[4]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_tempDataIn_d_exp[4] = tempDataIn_d_expected_prev[4];
	end
	if (
		( tempDataIn_d_expected_prev[5] !== 1'bx ) && ( tempDataIn_d_prev[5] !== tempDataIn_d_expected_prev[5] )
		&& ((tempDataIn_d_expected_prev[5] !== last_tempDataIn_d_exp[5]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_tempDataIn_d_exp[5] = tempDataIn_d_expected_prev[5];
	end
	if (
		( tempDataIn_d_expected_prev[6] !== 1'bx ) && ( tempDataIn_d_prev[6] !== tempDataIn_d_expected_prev[6] )
		&& ((tempDataIn_d_expected_prev[6] !== last_tempDataIn_d_exp[6]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_tempDataIn_d_exp[6] = tempDataIn_d_expected_prev[6];
	end
	if (
		( tempDataIn_d_expected_prev[7] !== 1'bx ) && ( tempDataIn_d_prev[7] !== tempDataIn_d_expected_prev[7] )
		&& ((tempDataIn_d_expected_prev[7] !== last_tempDataIn_d_exp[7]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_tempDataIn_d_exp[7] = tempDataIn_d_expected_prev[7];
	end
	if (
		( tempDataIn_d_expected_prev[8] !== 1'bx ) && ( tempDataIn_d_prev[8] !== tempDataIn_d_expected_prev[8] )
		&& ((tempDataIn_d_expected_prev[8] !== last_tempDataIn_d_exp[8]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_tempDataIn_d_exp[8] = tempDataIn_d_expected_prev[8];
	end
	if (
		( tempDataIn_d_expected_prev[9] !== 1'bx ) && ( tempDataIn_d_prev[9] !== tempDataIn_d_expected_prev[9] )
		&& ((tempDataIn_d_expected_prev[9] !== last_tempDataIn_d_exp[9]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_tempDataIn_d_exp[9] = tempDataIn_d_expected_prev[9];
	end
	if (
		( tempDataIn_d_expected_prev[10] !== 1'bx ) && ( tempDataIn_d_prev[10] !== tempDataIn_d_expected_prev[10] )
		&& ((tempDataIn_d_expected_prev[10] !== last_tempDataIn_d_exp[10]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_tempDataIn_d_exp[10] = tempDataIn_d_expected_prev[10];
	end
	if (
		( tempDataIn_d_expected_prev[11] !== 1'bx ) && ( tempDataIn_d_prev[11] !== tempDataIn_d_expected_prev[11] )
		&& ((tempDataIn_d_expected_prev[11] !== last_tempDataIn_d_exp[11]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_tempDataIn_d_exp[11] = tempDataIn_d_expected_prev[11];
	end
	if (
		( tempDataIn_d_expected_prev[12] !== 1'bx ) && ( tempDataIn_d_prev[12] !== tempDataIn_d_expected_prev[12] )
		&& ((tempDataIn_d_expected_prev[12] !== last_tempDataIn_d_exp[12]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_tempDataIn_d_exp[12] = tempDataIn_d_expected_prev[12];
	end
	if (
		( tempDataIn_d_expected_prev[13] !== 1'bx ) && ( tempDataIn_d_prev[13] !== tempDataIn_d_expected_prev[13] )
		&& ((tempDataIn_d_expected_prev[13] !== last_tempDataIn_d_exp[13]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_tempDataIn_d_exp[13] = tempDataIn_d_expected_prev[13];
	end
	if (
		( tempDataIn_d_expected_prev[14] !== 1'bx ) && ( tempDataIn_d_prev[14] !== tempDataIn_d_expected_prev[14] )
		&& ((tempDataIn_d_expected_prev[14] !== last_tempDataIn_d_exp[14]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_tempDataIn_d_exp[14] = tempDataIn_d_expected_prev[14];
	end
	if (
		( tempDataIn_d_expected_prev[15] !== 1'bx ) && ( tempDataIn_d_prev[15] !== tempDataIn_d_expected_prev[15] )
		&& ((tempDataIn_d_expected_prev[15] !== last_tempDataIn_d_exp[15]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataIn_d[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataIn_d_expected_prev);
		$display ("     Real value = %b", tempDataIn_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_tempDataIn_d_exp[15] = tempDataIn_d_expected_prev[15];
	end
	if (
		( tempDataOut_d_expected_prev[0] !== 1'bx ) && ( tempDataOut_d_prev[0] !== tempDataOut_d_expected_prev[0] )
		&& ((tempDataOut_d_expected_prev[0] !== last_tempDataOut_d_exp[0]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_tempDataOut_d_exp[0] = tempDataOut_d_expected_prev[0];
	end
	if (
		( tempDataOut_d_expected_prev[1] !== 1'bx ) && ( tempDataOut_d_prev[1] !== tempDataOut_d_expected_prev[1] )
		&& ((tempDataOut_d_expected_prev[1] !== last_tempDataOut_d_exp[1]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_tempDataOut_d_exp[1] = tempDataOut_d_expected_prev[1];
	end
	if (
		( tempDataOut_d_expected_prev[2] !== 1'bx ) && ( tempDataOut_d_prev[2] !== tempDataOut_d_expected_prev[2] )
		&& ((tempDataOut_d_expected_prev[2] !== last_tempDataOut_d_exp[2]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_tempDataOut_d_exp[2] = tempDataOut_d_expected_prev[2];
	end
	if (
		( tempDataOut_d_expected_prev[3] !== 1'bx ) && ( tempDataOut_d_prev[3] !== tempDataOut_d_expected_prev[3] )
		&& ((tempDataOut_d_expected_prev[3] !== last_tempDataOut_d_exp[3]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_tempDataOut_d_exp[3] = tempDataOut_d_expected_prev[3];
	end
	if (
		( tempDataOut_d_expected_prev[4] !== 1'bx ) && ( tempDataOut_d_prev[4] !== tempDataOut_d_expected_prev[4] )
		&& ((tempDataOut_d_expected_prev[4] !== last_tempDataOut_d_exp[4]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_tempDataOut_d_exp[4] = tempDataOut_d_expected_prev[4];
	end
	if (
		( tempDataOut_d_expected_prev[5] !== 1'bx ) && ( tempDataOut_d_prev[5] !== tempDataOut_d_expected_prev[5] )
		&& ((tempDataOut_d_expected_prev[5] !== last_tempDataOut_d_exp[5]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_tempDataOut_d_exp[5] = tempDataOut_d_expected_prev[5];
	end
	if (
		( tempDataOut_d_expected_prev[6] !== 1'bx ) && ( tempDataOut_d_prev[6] !== tempDataOut_d_expected_prev[6] )
		&& ((tempDataOut_d_expected_prev[6] !== last_tempDataOut_d_exp[6]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_tempDataOut_d_exp[6] = tempDataOut_d_expected_prev[6];
	end
	if (
		( tempDataOut_d_expected_prev[7] !== 1'bx ) && ( tempDataOut_d_prev[7] !== tempDataOut_d_expected_prev[7] )
		&& ((tempDataOut_d_expected_prev[7] !== last_tempDataOut_d_exp[7]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_tempDataOut_d_exp[7] = tempDataOut_d_expected_prev[7];
	end
	if (
		( tempDataOut_d_expected_prev[8] !== 1'bx ) && ( tempDataOut_d_prev[8] !== tempDataOut_d_expected_prev[8] )
		&& ((tempDataOut_d_expected_prev[8] !== last_tempDataOut_d_exp[8]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_tempDataOut_d_exp[8] = tempDataOut_d_expected_prev[8];
	end
	if (
		( tempDataOut_d_expected_prev[9] !== 1'bx ) && ( tempDataOut_d_prev[9] !== tempDataOut_d_expected_prev[9] )
		&& ((tempDataOut_d_expected_prev[9] !== last_tempDataOut_d_exp[9]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_tempDataOut_d_exp[9] = tempDataOut_d_expected_prev[9];
	end
	if (
		( tempDataOut_d_expected_prev[10] !== 1'bx ) && ( tempDataOut_d_prev[10] !== tempDataOut_d_expected_prev[10] )
		&& ((tempDataOut_d_expected_prev[10] !== last_tempDataOut_d_exp[10]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_tempDataOut_d_exp[10] = tempDataOut_d_expected_prev[10];
	end
	if (
		( tempDataOut_d_expected_prev[11] !== 1'bx ) && ( tempDataOut_d_prev[11] !== tempDataOut_d_expected_prev[11] )
		&& ((tempDataOut_d_expected_prev[11] !== last_tempDataOut_d_exp[11]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_tempDataOut_d_exp[11] = tempDataOut_d_expected_prev[11];
	end
	if (
		( tempDataOut_d_expected_prev[12] !== 1'bx ) && ( tempDataOut_d_prev[12] !== tempDataOut_d_expected_prev[12] )
		&& ((tempDataOut_d_expected_prev[12] !== last_tempDataOut_d_exp[12]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_tempDataOut_d_exp[12] = tempDataOut_d_expected_prev[12];
	end
	if (
		( tempDataOut_d_expected_prev[13] !== 1'bx ) && ( tempDataOut_d_prev[13] !== tempDataOut_d_expected_prev[13] )
		&& ((tempDataOut_d_expected_prev[13] !== last_tempDataOut_d_exp[13]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_tempDataOut_d_exp[13] = tempDataOut_d_expected_prev[13];
	end
	if (
		( tempDataOut_d_expected_prev[14] !== 1'bx ) && ( tempDataOut_d_prev[14] !== tempDataOut_d_expected_prev[14] )
		&& ((tempDataOut_d_expected_prev[14] !== last_tempDataOut_d_exp[14]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_tempDataOut_d_exp[14] = tempDataOut_d_expected_prev[14];
	end
	if (
		( tempDataOut_d_expected_prev[15] !== 1'bx ) && ( tempDataOut_d_prev[15] !== tempDataOut_d_expected_prev[15] )
		&& ((tempDataOut_d_expected_prev[15] !== last_tempDataOut_d_exp[15]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tempDataOut_d[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tempDataOut_d_expected_prev);
		$display ("     Real value = %b", tempDataOut_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_tempDataOut_d_exp[15] = tempDataOut_d_expected_prev[15];
	end
	if (
		( write_back_block_expected_prev[0] !== 1'bx ) && ( write_back_block_prev[0] !== write_back_block_expected_prev[0] )
		&& ((write_back_block_expected_prev[0] !== last_write_back_block_exp[0]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[0] = write_back_block_expected_prev[0];
	end
	if (
		( write_back_block_expected_prev[1] !== 1'bx ) && ( write_back_block_prev[1] !== write_back_block_expected_prev[1] )
		&& ((write_back_block_expected_prev[1] !== last_write_back_block_exp[1]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[1] = write_back_block_expected_prev[1];
	end
	if (
		( write_back_block_expected_prev[2] !== 1'bx ) && ( write_back_block_prev[2] !== write_back_block_expected_prev[2] )
		&& ((write_back_block_expected_prev[2] !== last_write_back_block_exp[2]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[2] = write_back_block_expected_prev[2];
	end
	if (
		( write_back_block_expected_prev[3] !== 1'bx ) && ( write_back_block_prev[3] !== write_back_block_expected_prev[3] )
		&& ((write_back_block_expected_prev[3] !== last_write_back_block_exp[3]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[3] = write_back_block_expected_prev[3];
	end
	if (
		( write_back_block_expected_prev[4] !== 1'bx ) && ( write_back_block_prev[4] !== write_back_block_expected_prev[4] )
		&& ((write_back_block_expected_prev[4] !== last_write_back_block_exp[4]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[4] = write_back_block_expected_prev[4];
	end
	if (
		( write_back_block_expected_prev[5] !== 1'bx ) && ( write_back_block_prev[5] !== write_back_block_expected_prev[5] )
		&& ((write_back_block_expected_prev[5] !== last_write_back_block_exp[5]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[5] = write_back_block_expected_prev[5];
	end
	if (
		( write_back_block_expected_prev[6] !== 1'bx ) && ( write_back_block_prev[6] !== write_back_block_expected_prev[6] )
		&& ((write_back_block_expected_prev[6] !== last_write_back_block_exp[6]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[6] = write_back_block_expected_prev[6];
	end
	if (
		( write_back_block_expected_prev[7] !== 1'bx ) && ( write_back_block_prev[7] !== write_back_block_expected_prev[7] )
		&& ((write_back_block_expected_prev[7] !== last_write_back_block_exp[7]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[7] = write_back_block_expected_prev[7];
	end
	if (
		( write_back_block_expected_prev[8] !== 1'bx ) && ( write_back_block_prev[8] !== write_back_block_expected_prev[8] )
		&& ((write_back_block_expected_prev[8] !== last_write_back_block_exp[8]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[8] = write_back_block_expected_prev[8];
	end
	if (
		( write_back_block_expected_prev[9] !== 1'bx ) && ( write_back_block_prev[9] !== write_back_block_expected_prev[9] )
		&& ((write_back_block_expected_prev[9] !== last_write_back_block_exp[9]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[9] = write_back_block_expected_prev[9];
	end
	if (
		( write_back_block_expected_prev[10] !== 1'bx ) && ( write_back_block_prev[10] !== write_back_block_expected_prev[10] )
		&& ((write_back_block_expected_prev[10] !== last_write_back_block_exp[10]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[10] = write_back_block_expected_prev[10];
	end
	if (
		( write_back_block_expected_prev[11] !== 1'bx ) && ( write_back_block_prev[11] !== write_back_block_expected_prev[11] )
		&& ((write_back_block_expected_prev[11] !== last_write_back_block_exp[11]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[11] = write_back_block_expected_prev[11];
	end
	if (
		( write_back_block_expected_prev[12] !== 1'bx ) && ( write_back_block_prev[12] !== write_back_block_expected_prev[12] )
		&& ((write_back_block_expected_prev[12] !== last_write_back_block_exp[12]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[12] = write_back_block_expected_prev[12];
	end
	if (
		( write_back_block_expected_prev[13] !== 1'bx ) && ( write_back_block_prev[13] !== write_back_block_expected_prev[13] )
		&& ((write_back_block_expected_prev[13] !== last_write_back_block_exp[13]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[13] = write_back_block_expected_prev[13];
	end
	if (
		( write_back_block_expected_prev[14] !== 1'bx ) && ( write_back_block_prev[14] !== write_back_block_expected_prev[14] )
		&& ((write_back_block_expected_prev[14] !== last_write_back_block_exp[14]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[14] = write_back_block_expected_prev[14];
	end
	if (
		( write_back_block_expected_prev[15] !== 1'bx ) && ( write_back_block_prev[15] !== write_back_block_expected_prev[15] )
		&& ((write_back_block_expected_prev[15] !== last_write_back_block_exp[15]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[15] = write_back_block_expected_prev[15];
	end
	if (
		( write_back_block_expected_prev[16] !== 1'bx ) && ( write_back_block_prev[16] !== write_back_block_expected_prev[16] )
		&& ((write_back_block_expected_prev[16] !== last_write_back_block_exp[16]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[16] = write_back_block_expected_prev[16];
	end
	if (
		( write_back_block_expected_prev[17] !== 1'bx ) && ( write_back_block_prev[17] !== write_back_block_expected_prev[17] )
		&& ((write_back_block_expected_prev[17] !== last_write_back_block_exp[17]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[17] = write_back_block_expected_prev[17];
	end
	if (
		( write_back_block_expected_prev[18] !== 1'bx ) && ( write_back_block_prev[18] !== write_back_block_expected_prev[18] )
		&& ((write_back_block_expected_prev[18] !== last_write_back_block_exp[18]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[18] = write_back_block_expected_prev[18];
	end
	if (
		( write_back_block_expected_prev[19] !== 1'bx ) && ( write_back_block_prev[19] !== write_back_block_expected_prev[19] )
		&& ((write_back_block_expected_prev[19] !== last_write_back_block_exp[19]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[19] = write_back_block_expected_prev[19];
	end
	if (
		( write_back_block_expected_prev[20] !== 1'bx ) && ( write_back_block_prev[20] !== write_back_block_expected_prev[20] )
		&& ((write_back_block_expected_prev[20] !== last_write_back_block_exp[20]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[20] = write_back_block_expected_prev[20];
	end
	if (
		( write_back_block_expected_prev[21] !== 1'bx ) && ( write_back_block_prev[21] !== write_back_block_expected_prev[21] )
		&& ((write_back_block_expected_prev[21] !== last_write_back_block_exp[21]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[21] = write_back_block_expected_prev[21];
	end
	if (
		( write_back_block_expected_prev[22] !== 1'bx ) && ( write_back_block_prev[22] !== write_back_block_expected_prev[22] )
		&& ((write_back_block_expected_prev[22] !== last_write_back_block_exp[22]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[22] = write_back_block_expected_prev[22];
	end
	if (
		( write_back_block_expected_prev[23] !== 1'bx ) && ( write_back_block_prev[23] !== write_back_block_expected_prev[23] )
		&& ((write_back_block_expected_prev[23] !== last_write_back_block_exp[23]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[23] = write_back_block_expected_prev[23];
	end
	if (
		( write_back_block_expected_prev[24] !== 1'bx ) && ( write_back_block_prev[24] !== write_back_block_expected_prev[24] )
		&& ((write_back_block_expected_prev[24] !== last_write_back_block_exp[24]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[24] = write_back_block_expected_prev[24];
	end
	if (
		( write_back_block_expected_prev[25] !== 1'bx ) && ( write_back_block_prev[25] !== write_back_block_expected_prev[25] )
		&& ((write_back_block_expected_prev[25] !== last_write_back_block_exp[25]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[25] = write_back_block_expected_prev[25];
	end
	if (
		( write_back_block_expected_prev[26] !== 1'bx ) && ( write_back_block_prev[26] !== write_back_block_expected_prev[26] )
		&& ((write_back_block_expected_prev[26] !== last_write_back_block_exp[26]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[26] = write_back_block_expected_prev[26];
	end
	if (
		( write_back_block_expected_prev[27] !== 1'bx ) && ( write_back_block_prev[27] !== write_back_block_expected_prev[27] )
		&& ((write_back_block_expected_prev[27] !== last_write_back_block_exp[27]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[27] = write_back_block_expected_prev[27];
	end
	if (
		( write_back_block_expected_prev[28] !== 1'bx ) && ( write_back_block_prev[28] !== write_back_block_expected_prev[28] )
		&& ((write_back_block_expected_prev[28] !== last_write_back_block_exp[28]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[28] = write_back_block_expected_prev[28];
	end
	if (
		( write_back_block_expected_prev[29] !== 1'bx ) && ( write_back_block_prev[29] !== write_back_block_expected_prev[29] )
		&& ((write_back_block_expected_prev[29] !== last_write_back_block_exp[29]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[29] = write_back_block_expected_prev[29];
	end
	if (
		( write_back_block_expected_prev[30] !== 1'bx ) && ( write_back_block_prev[30] !== write_back_block_expected_prev[30] )
		&& ((write_back_block_expected_prev[30] !== last_write_back_block_exp[30]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[30] = write_back_block_expected_prev[30];
	end
	if (
		( write_back_block_expected_prev[31] !== 1'bx ) && ( write_back_block_prev[31] !== write_back_block_expected_prev[31] )
		&& ((write_back_block_expected_prev[31] !== last_write_back_block_exp[31]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[31] = write_back_block_expected_prev[31];
	end
	if (
		( write_back_block_expected_prev[32] !== 1'bx ) && ( write_back_block_prev[32] !== write_back_block_expected_prev[32] )
		&& ((write_back_block_expected_prev[32] !== last_write_back_block_exp[32]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[32] = write_back_block_expected_prev[32];
	end
	if (
		( write_back_block_expected_prev[33] !== 1'bx ) && ( write_back_block_prev[33] !== write_back_block_expected_prev[33] )
		&& ((write_back_block_expected_prev[33] !== last_write_back_block_exp[33]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[33] = write_back_block_expected_prev[33];
	end
	if (
		( write_back_block_expected_prev[34] !== 1'bx ) && ( write_back_block_prev[34] !== write_back_block_expected_prev[34] )
		&& ((write_back_block_expected_prev[34] !== last_write_back_block_exp[34]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[34] = write_back_block_expected_prev[34];
	end
	if (
		( write_back_block_expected_prev[35] !== 1'bx ) && ( write_back_block_prev[35] !== write_back_block_expected_prev[35] )
		&& ((write_back_block_expected_prev[35] !== last_write_back_block_exp[35]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[35] = write_back_block_expected_prev[35];
	end
	if (
		( write_back_block_expected_prev[36] !== 1'bx ) && ( write_back_block_prev[36] !== write_back_block_expected_prev[36] )
		&& ((write_back_block_expected_prev[36] !== last_write_back_block_exp[36]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[36] = write_back_block_expected_prev[36];
	end
	if (
		( write_back_block_expected_prev[37] !== 1'bx ) && ( write_back_block_prev[37] !== write_back_block_expected_prev[37] )
		&& ((write_back_block_expected_prev[37] !== last_write_back_block_exp[37]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[37] = write_back_block_expected_prev[37];
	end
	if (
		( write_back_block_expected_prev[38] !== 1'bx ) && ( write_back_block_prev[38] !== write_back_block_expected_prev[38] )
		&& ((write_back_block_expected_prev[38] !== last_write_back_block_exp[38]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[38] = write_back_block_expected_prev[38];
	end
	if (
		( write_back_block_expected_prev[39] !== 1'bx ) && ( write_back_block_prev[39] !== write_back_block_expected_prev[39] )
		&& ((write_back_block_expected_prev[39] !== last_write_back_block_exp[39]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[39] = write_back_block_expected_prev[39];
	end
	if (
		( write_back_block_expected_prev[40] !== 1'bx ) && ( write_back_block_prev[40] !== write_back_block_expected_prev[40] )
		&& ((write_back_block_expected_prev[40] !== last_write_back_block_exp[40]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[40] = write_back_block_expected_prev[40];
	end
	if (
		( write_back_block_expected_prev[41] !== 1'bx ) && ( write_back_block_prev[41] !== write_back_block_expected_prev[41] )
		&& ((write_back_block_expected_prev[41] !== last_write_back_block_exp[41]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[41] = write_back_block_expected_prev[41];
	end
	if (
		( write_back_block_expected_prev[42] !== 1'bx ) && ( write_back_block_prev[42] !== write_back_block_expected_prev[42] )
		&& ((write_back_block_expected_prev[42] !== last_write_back_block_exp[42]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[42] = write_back_block_expected_prev[42];
	end
	if (
		( write_back_block_expected_prev[43] !== 1'bx ) && ( write_back_block_prev[43] !== write_back_block_expected_prev[43] )
		&& ((write_back_block_expected_prev[43] !== last_write_back_block_exp[43]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[43] = write_back_block_expected_prev[43];
	end
	if (
		( write_back_block_expected_prev[44] !== 1'bx ) && ( write_back_block_prev[44] !== write_back_block_expected_prev[44] )
		&& ((write_back_block_expected_prev[44] !== last_write_back_block_exp[44]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[44] = write_back_block_expected_prev[44];
	end
	if (
		( write_back_block_expected_prev[45] !== 1'bx ) && ( write_back_block_prev[45] !== write_back_block_expected_prev[45] )
		&& ((write_back_block_expected_prev[45] !== last_write_back_block_exp[45]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[45] = write_back_block_expected_prev[45];
	end
	if (
		( write_back_block_expected_prev[46] !== 1'bx ) && ( write_back_block_prev[46] !== write_back_block_expected_prev[46] )
		&& ((write_back_block_expected_prev[46] !== last_write_back_block_exp[46]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[46] = write_back_block_expected_prev[46];
	end
	if (
		( write_back_block_expected_prev[47] !== 1'bx ) && ( write_back_block_prev[47] !== write_back_block_expected_prev[47] )
		&& ((write_back_block_expected_prev[47] !== last_write_back_block_exp[47]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[47] = write_back_block_expected_prev[47];
	end
	if (
		( write_back_block_expected_prev[48] !== 1'bx ) && ( write_back_block_prev[48] !== write_back_block_expected_prev[48] )
		&& ((write_back_block_expected_prev[48] !== last_write_back_block_exp[48]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[48] = write_back_block_expected_prev[48];
	end
	if (
		( write_back_block_expected_prev[49] !== 1'bx ) && ( write_back_block_prev[49] !== write_back_block_expected_prev[49] )
		&& ((write_back_block_expected_prev[49] !== last_write_back_block_exp[49]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[49] = write_back_block_expected_prev[49];
	end
	if (
		( write_back_block_expected_prev[50] !== 1'bx ) && ( write_back_block_prev[50] !== write_back_block_expected_prev[50] )
		&& ((write_back_block_expected_prev[50] !== last_write_back_block_exp[50]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[50] = write_back_block_expected_prev[50];
	end
	if (
		( write_back_block_expected_prev[51] !== 1'bx ) && ( write_back_block_prev[51] !== write_back_block_expected_prev[51] )
		&& ((write_back_block_expected_prev[51] !== last_write_back_block_exp[51]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[51] = write_back_block_expected_prev[51];
	end
	if (
		( write_back_block_expected_prev[52] !== 1'bx ) && ( write_back_block_prev[52] !== write_back_block_expected_prev[52] )
		&& ((write_back_block_expected_prev[52] !== last_write_back_block_exp[52]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[52] = write_back_block_expected_prev[52];
	end
	if (
		( write_back_block_expected_prev[53] !== 1'bx ) && ( write_back_block_prev[53] !== write_back_block_expected_prev[53] )
		&& ((write_back_block_expected_prev[53] !== last_write_back_block_exp[53]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[53] = write_back_block_expected_prev[53];
	end
	if (
		( write_back_block_expected_prev[54] !== 1'bx ) && ( write_back_block_prev[54] !== write_back_block_expected_prev[54] )
		&& ((write_back_block_expected_prev[54] !== last_write_back_block_exp[54]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[54] = write_back_block_expected_prev[54];
	end
	if (
		( write_back_block_expected_prev[55] !== 1'bx ) && ( write_back_block_prev[55] !== write_back_block_expected_prev[55] )
		&& ((write_back_block_expected_prev[55] !== last_write_back_block_exp[55]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[55] = write_back_block_expected_prev[55];
	end
	if (
		( write_back_block_expected_prev[56] !== 1'bx ) && ( write_back_block_prev[56] !== write_back_block_expected_prev[56] )
		&& ((write_back_block_expected_prev[56] !== last_write_back_block_exp[56]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[56] = write_back_block_expected_prev[56];
	end
	if (
		( write_back_block_expected_prev[57] !== 1'bx ) && ( write_back_block_prev[57] !== write_back_block_expected_prev[57] )
		&& ((write_back_block_expected_prev[57] !== last_write_back_block_exp[57]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[57] = write_back_block_expected_prev[57];
	end
	if (
		( write_back_block_expected_prev[58] !== 1'bx ) && ( write_back_block_prev[58] !== write_back_block_expected_prev[58] )
		&& ((write_back_block_expected_prev[58] !== last_write_back_block_exp[58]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[58] = write_back_block_expected_prev[58];
	end
	if (
		( write_back_block_expected_prev[59] !== 1'bx ) && ( write_back_block_prev[59] !== write_back_block_expected_prev[59] )
		&& ((write_back_block_expected_prev[59] !== last_write_back_block_exp[59]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[59] = write_back_block_expected_prev[59];
	end
	if (
		( write_back_block_expected_prev[60] !== 1'bx ) && ( write_back_block_prev[60] !== write_back_block_expected_prev[60] )
		&& ((write_back_block_expected_prev[60] !== last_write_back_block_exp[60]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[60] = write_back_block_expected_prev[60];
	end
	if (
		( write_back_block_expected_prev[61] !== 1'bx ) && ( write_back_block_prev[61] !== write_back_block_expected_prev[61] )
		&& ((write_back_block_expected_prev[61] !== last_write_back_block_exp[61]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[61] = write_back_block_expected_prev[61];
	end
	if (
		( write_back_block_expected_prev[62] !== 1'bx ) && ( write_back_block_prev[62] !== write_back_block_expected_prev[62] )
		&& ((write_back_block_expected_prev[62] !== last_write_back_block_exp[62]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[62] = write_back_block_expected_prev[62];
	end
	if (
		( write_back_block_expected_prev[63] !== 1'bx ) && ( write_back_block_prev[63] !== write_back_block_expected_prev[63] )
		&& ((write_back_block_expected_prev[63] !== last_write_back_block_exp[63]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_block[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_block_expected_prev);
		$display ("     Real value = %b", write_back_block_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_write_back_block_exp[63] = write_back_block_expected_prev[63];
	end
	if (
		( write_back_mem_expected_prev !== 1'bx ) && ( write_back_mem_prev !== write_back_mem_expected_prev )
		&& ((write_back_mem_expected_prev !== last_write_back_mem_exp) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_back_mem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_back_mem_expected_prev);
		$display ("     Real value = %b", write_back_mem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_write_back_mem_exp = write_back_mem_expected_prev;
	end
	if (
		( write_block_controller_sig_expected_prev !== 1'bx ) && ( write_block_controller_sig_prev !== write_block_controller_sig_expected_prev )
		&& ((write_block_controller_sig_expected_prev !== last_write_block_controller_sig_exp) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_block_controller_sig :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_block_controller_sig_expected_prev);
		$display ("     Real value = %b", write_block_controller_sig_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_write_block_controller_sig_exp = write_block_controller_sig_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module SimpleCompArch_vlg_vec_tst();
// constants                                           
// general purpose registers
reg sys_clk;
reg sys_rst;
// wires                                               
wire cache_en_d;
wire [3:0] cache_state_d;
wire [3:0] cont_state_d;
wire controller_en_d;
wire [1:0] D_ALUs;
wire D_jpz;
wire [15:0] D_mdin_bus;
wire [15:0] D_mdout_bus;
wire [11:0] D_mem_addr;
wire D_Mre;
wire D_Mwe;
wire D_PCld;
wire [15:0] D_rfout_bus;
wire [3:0] D_RFr1a;
wire D_RFr1e;
wire [3:0] D_RFr2a;
wire D_RFr2e;
wire [1:0] D_RFs;
wire [3:0] D_RFwa;
wire D_RFwe;
wire done_write_back_d;
wire [2:0] lineIndex_d;
wire [15:0] reg_in_data;
wire [15:0] reg_out_data_1;
wire [15:0] reg_out_data_2;
wire [11:0] state_cpu;
wire [15:0] sys_output;
wire [6:0] tagIndex_d;
wire [15:0] tempDataIn_d;
wire [15:0] tempDataOut_d;
wire [63:0] write_back_block;
wire write_back_mem;
wire write_block_controller_sig;

wire sampler;                             

// assign statements (if any)                          
SimpleCompArch i1 (
// port map - connection between master ports and signals/registers   
	.cache_en_d(cache_en_d),
	.cache_state_d(cache_state_d),
	.cont_state_d(cont_state_d),
	.controller_en_d(controller_en_d),
	.D_ALUs(D_ALUs),
	.D_jpz(D_jpz),
	.D_mdin_bus(D_mdin_bus),
	.D_mdout_bus(D_mdout_bus),
	.D_mem_addr(D_mem_addr),
	.D_Mre(D_Mre),
	.D_Mwe(D_Mwe),
	.D_PCld(D_PCld),
	.D_rfout_bus(D_rfout_bus),
	.D_RFr1a(D_RFr1a),
	.D_RFr1e(D_RFr1e),
	.D_RFr2a(D_RFr2a),
	.D_RFr2e(D_RFr2e),
	.D_RFs(D_RFs),
	.D_RFwa(D_RFwa),
	.D_RFwe(D_RFwe),
	.done_write_back_d(done_write_back_d),
	.lineIndex_d(lineIndex_d),
	.reg_in_data(reg_in_data),
	.reg_out_data_1(reg_out_data_1),
	.reg_out_data_2(reg_out_data_2),
	.state_cpu(state_cpu),
	.sys_clk(sys_clk),
	.sys_output(sys_output),
	.sys_rst(sys_rst),
	.tagIndex_d(tagIndex_d),
	.tempDataIn_d(tempDataIn_d),
	.tempDataOut_d(tempDataOut_d),
	.write_back_block(write_back_block),
	.write_back_mem(write_back_mem),
	.write_block_controller_sig(write_block_controller_sig)
);

// sys_clk
always
begin
	sys_clk = 1'b0;
	sys_clk = #5000 1'b1;
	#5000;
end 

// sys_rst
initial
begin
	sys_rst = 1'b1;
	sys_rst = #80000 1'b0;
end 

SimpleCompArch_vlg_sample_tst tb_sample (
	.sys_clk(sys_clk),
	.sys_rst(sys_rst),
	.sampler_tx(sampler)
);

SimpleCompArch_vlg_check_tst tb_out(
	.cache_en_d(cache_en_d),
	.cache_state_d(cache_state_d),
	.cont_state_d(cont_state_d),
	.controller_en_d(controller_en_d),
	.D_ALUs(D_ALUs),
	.D_jpz(D_jpz),
	.D_mdin_bus(D_mdin_bus),
	.D_mdout_bus(D_mdout_bus),
	.D_mem_addr(D_mem_addr),
	.D_Mre(D_Mre),
	.D_Mwe(D_Mwe),
	.D_PCld(D_PCld),
	.D_rfout_bus(D_rfout_bus),
	.D_RFr1a(D_RFr1a),
	.D_RFr1e(D_RFr1e),
	.D_RFr2a(D_RFr2a),
	.D_RFr2e(D_RFr2e),
	.D_RFs(D_RFs),
	.D_RFwa(D_RFwa),
	.D_RFwe(D_RFwe),
	.done_write_back_d(done_write_back_d),
	.lineIndex_d(lineIndex_d),
	.reg_in_data(reg_in_data),
	.reg_out_data_1(reg_out_data_1),
	.reg_out_data_2(reg_out_data_2),
	.state_cpu(state_cpu),
	.sys_output(sys_output),
	.tagIndex_d(tagIndex_d),
	.tempDataIn_d(tempDataIn_d),
	.tempDataOut_d(tempDataOut_d),
	.write_back_block(write_back_block),
	.write_back_mem(write_back_mem),
	.write_block_controller_sig(write_block_controller_sig),
	.sampler_rx(sampler)
);
endmodule

