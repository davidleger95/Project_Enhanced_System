// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/14/2016 17:01:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    LineMemory
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module LineMemory_vlg_sample_tst(
	lineIndex,
	reset,
	tagIndex,
	writeTag,
	sampler_tx
);
input [2:0] lineIndex;
input  reset;
input [6:0] tagIndex;
input  writeTag;
output sampler_tx;

reg sample;
time current_time;
always @(lineIndex or reset or tagIndex or writeTag)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module LineMemory_vlg_check_tst (
	hit,
	sampler_rx
);
input  hit;
input sampler_rx;

reg  hit_expected;

reg  hit_prev;

reg  hit_expected_prev;

reg  last_hit_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	hit_prev = hit;
end

// update expected /o prevs

always @(trigger)
begin
	hit_expected_prev = hit_expected;
end



// expected hit
initial
begin
	hit_expected = 1'bX;
	hit_expected = #40000 1'b0;
	hit_expected = #70000 1'bX;
end 
// generate trigger
always @(hit_expected or hit)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected hit = %b | ",hit_expected_prev);
	$display("| real hit = %b | ",hit_prev);
`endif
	if (
		( hit_expected_prev !== 1'bx ) && ( hit_prev !== hit_expected_prev )
		&& ((hit_expected_prev !== last_hit_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hit :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hit_expected_prev);
		$display ("     Real value = %b", hit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hit_exp = hit_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module LineMemory_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] lineIndex;
reg reset;
reg [6:0] tagIndex;
reg writeTag;
// wires                                               
wire hit;

wire sampler;                             

// assign statements (if any)                          
LineMemory i1 (
// port map - connection between master ports and signals/registers   
	.hit(hit),
	.lineIndex(lineIndex),
	.reset(reset),
	.tagIndex(tagIndex),
	.writeTag(writeTag)
);
// lineIndex[ 2 ]
initial
begin
	lineIndex[2] = 1'b0;
	lineIndex[2] = #240000 1'b1;
	lineIndex[2] = #200000 1'b0;
	lineIndex[2] = #90000 1'b1;
	lineIndex[2] = #340000 1'b0;
	lineIndex[2] = #30000 1'b1;
	lineIndex[2] = #70000 1'b0;
end 
// lineIndex[ 1 ]
initial
begin
	lineIndex[1] = 1'b0;
	lineIndex[1] = #160000 1'b1;
	lineIndex[1] = #40000 1'b0;
	lineIndex[1] = #40000 1'b1;
	lineIndex[1] = #200000 1'b0;
	lineIndex[1] = #90000 1'b1;
	lineIndex[1] = #340000 1'b0;
	lineIndex[1] = #30000 1'b1;
	lineIndex[1] = #70000 1'b0;
end 
// lineIndex[ 0 ]
initial
begin
	lineIndex[0] = 1'b1;
	lineIndex[0] = #40000 1'b0;
	lineIndex[0] = #40000 1'b1;
	lineIndex[0] = #80000 1'b0;
	lineIndex[0] = #80000 1'b1;
	lineIndex[0] = #200000 1'b0;
	lineIndex[0] = #90000 1'b1;
	lineIndex[0] = #150000 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #30000 1'b0;
end 
// tagIndex[ 6 ]
initial
begin
	tagIndex[6] = 1'b0;
end 
// tagIndex[ 5 ]
initial
begin
	tagIndex[5] = 1'b0;
end 
// tagIndex[ 4 ]
initial
begin
	tagIndex[4] = 1'b0;
end 
// tagIndex[ 3 ]
initial
begin
	tagIndex[3] = 1'b0;
	tagIndex[3] = #240000 1'b1;
	tagIndex[3] = #200000 1'b0;
	tagIndex[3] = #90000 1'b1;
	tagIndex[3] = #150000 1'b0;
	tagIndex[3] = #60000 1'b1;
	tagIndex[3] = #230000 1'b0;
end 
// tagIndex[ 2 ]
initial
begin
	tagIndex[2] = 1'b0;
	tagIndex[2] = #240000 1'b1;
	tagIndex[2] = #200000 1'b0;
	tagIndex[2] = #90000 1'b1;
	tagIndex[2] = #150000 1'b0;
end 
// tagIndex[ 1 ]
initial
begin
	tagIndex[1] = 1'b0;
	tagIndex[1] = #240000 1'b1;
	tagIndex[1] = #200000 1'b0;
	tagIndex[1] = #90000 1'b1;
	tagIndex[1] = #150000 1'b0;
end 
// tagIndex[ 0 ]
initial
begin
	tagIndex[0] = 1'b0;
	tagIndex[0] = #80000 1'b1;
	tagIndex[0] = #80000 1'b0;
	tagIndex[0] = #80000 1'b1;
	tagIndex[0] = #200000 1'b0;
	tagIndex[0] = #90000 1'b1;
	tagIndex[0] = #150000 1'b0;
end 

// writeTag
initial
begin
	writeTag = 1'b0;
	writeTag = #310000 1'b1;
	writeTag = #110000 1'b0;
	writeTag = #330000 1'b1;
	writeTag = #100000 1'b0;
end 

LineMemory_vlg_sample_tst tb_sample (
	.lineIndex(lineIndex),
	.reset(reset),
	.tagIndex(tagIndex),
	.writeTag(writeTag),
	.sampler_tx(sampler)
);

LineMemory_vlg_check_tst tb_out(
	.hit(hit),
	.sampler_rx(sampler)
);
endmodule

